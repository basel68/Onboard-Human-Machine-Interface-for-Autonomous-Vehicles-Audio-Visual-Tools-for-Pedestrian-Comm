
WS2812B_LED_DMA_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800395c  0800395c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000640  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d67  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a0d  00000000  00000000  00028e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0002a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006ec  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b4c  00000000  00000000  0002b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b0c9  00000000  00000000  0004d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca4cc  00000000  00000000  00058471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b60  00000000  00000000  00122940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001254a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800390c 	.word	0x0800390c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800390c 	.word	0x0800390c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <WS2812_Send>:
	LED_Data[LEDnum][3] = Blue;
}


void WS2812_Send (uint32_t color)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint32_t indx=0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
//	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	e022      	b.n	800051c <WS2812_Send+0x58>
	{

//		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));


		for (int i=23; i>=0; i--)
 80004d6:	2317      	movs	r3, #23
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	e019      	b.n	8000510 <WS2812_Send+0x4c>
		{
			if (color&(1<<i))
 80004dc:	2201      	movs	r2, #1
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d005      	beq.n	80004fa <WS2812_Send+0x36>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80004ee:	4a1f      	ldr	r2, [pc, #124]	; (800056c <WS2812_Send+0xa8>)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	213c      	movs	r1, #60	; 0x3c
 80004f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80004f8:	e004      	b.n	8000504 <WS2812_Send+0x40>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <WS2812_Send+0xa8>)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	211e      	movs	r1, #30
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	3b01      	subs	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	dae2      	bge.n	80004dc <WS2812_Send+0x18>
	for (int i= 0; i<MAX_LED; i++)
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	3301      	adds	r3, #1
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	2b13      	cmp	r3, #19
 8000520:	ddd9      	ble.n	80004d6 <WS2812_Send+0x12>
		}

	}

	for (int i=0; i<48; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	e00a      	b.n	800053e <WS2812_Send+0x7a>
	{
		pwmData[indx] = 0;
 8000528:	4a10      	ldr	r2, [pc, #64]	; (800056c <WS2812_Send+0xa8>)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2100      	movs	r1, #0
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
	for (int i=0; i<48; i++)
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	3301      	adds	r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	2b2f      	cmp	r3, #47	; 0x2f
 8000542:	ddf1      	ble.n	8000528 <WS2812_Send+0x64>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	b29b      	uxth	r3, r3
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <WS2812_Send+0xa8>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <WS2812_Send+0xac>)
 800054e:	f001 fe8d 	bl	800226c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000552:	bf00      	nop
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <WS2812_Send+0xb0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0fb      	beq.n	8000554 <WS2812_Send+0x90>
	datasentflag = 0;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <WS2812_Send+0xb0>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000084 	.word	0x20000084
 8000570:	200004a8 	.word	0x200004a8
 8000574:	20000550 	.word	0x20000550

08000578 <SysTick_Handler>:

#include "main.h"
#include "stm32f4xx_it.h"
extern DMA_HandleTypeDef hdma_tim1_ch1;
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 fb16 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <DMA2_Stream1_IRQHandler+0x10>)
 800058a:	f000 fda9 	bl	80010e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200004f0 	.word	0x200004f0

08000598 <main>:
DMA_HandleTypeDef hdma_tim1_ch1;
uint8_t datasentflag=0;
void system_clock_config_HSI(uint8_t clock_freq);
static void TIM1_Init(void);
static void DMA_Init(void);
int main (){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	HAL_Init();
 800059c:	f000 fab4 	bl	8000b08 <HAL_Init>
	system_clock_config_HSI(SYS_CLOCK_FREQ_72_MHZ);
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 f819 	bl	80005d8 <system_clock_config_HSI>
	DMA_Init();
 80005a6:	f000 f8d5 	bl	8000754 <DMA_Init>
	TIM1_Init();
 80005aa:	f000 f891 	bl	80006d0 <TIM1_Init>
	printf("hello\n");
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x3c>)
 80005b0:	f002 fe18 	bl	80031e4 <puts>


	while(1){

		 WS2812_Send(GREEN);
 80005b4:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80005b8:	f7ff ff84 	bl	80004c4 <WS2812_Send>
				  HAL_Delay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c0:	f000 fb14 	bl	8000bec <HAL_Delay>

				  WS2812_Send(OFF);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ff7d 	bl	80004c4 <WS2812_Send>
				  HAL_Delay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ce:	f000 fb0d 	bl	8000bec <HAL_Delay>
		 WS2812_Send(GREEN);
 80005d2:	e7ef      	b.n	80005b4 <main+0x1c>
 80005d4:	08003924 	.word	0x08003924

080005d8 <system_clock_config_HSI>:
	}

	return 0;
}

void system_clock_config_HSI(uint8_t clock_freq ){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	  RCC_OscInitTypeDef osc_init = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 feda 	bl	80033a4 <memset>
	  RCC_ClkInitTypeDef clk_init = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
	  uint32_t FLatency =0;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c

	  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
	  osc_init.HSIState=RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
	  osc_init.HSICalibrationValue=RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  osc_init.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
	  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
	  switch (clock_freq){
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <system_clock_config_HSI+0x4c>
 800061e:	2b02      	cmp	r3, #2
 8000620:	d017      	beq.n	8000652 <system_clock_config_HSI+0x7a>
		  FLatency=FLASH_ACR_LATENCY_2WS;
		  break;

		}
	  default:
		  return;
 8000622:	e04f      	b.n	80006c4 <system_clock_config_HSI+0xec>
		  osc_init.PLL.PLLM=16;
 8000624:	2310      	movs	r3, #16
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=160;
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 8000650:	e016      	b.n	8000680 <system_clock_config_HSI+0xa8>
		  osc_init.PLL.PLLM=16;
 8000652:	2310      	movs	r3, #16
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=144;
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000662:	230f      	movs	r3, #15
 8000664:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 800067e:	bf00      	nop
	  }
	 if( HAL_RCC_OscConfig(&osc_init)!= HAL_OK){
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f931 	bl	80018ec <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <system_clock_config_HSI+0xbc>
		 Error_Handler();
 8000690:	f000 f894 	bl	80007bc <Error_Handler>
	 }
	 if( HAL_RCC_ClockConfig(&clk_init, FLatency)!= HAL_OK){
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fb9e 	bl	8001ddc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <system_clock_config_HSI+0xd2>
			 Error_Handler();
 80006a6:	f000 f889 	bl	80007bc <Error_Handler>
		 }

	 //Systick configuration
	 	 // for 1 ms for every systick interrupt
	 	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006aa:	f001 fd83 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <system_clock_config_HSI+0xf4>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	099b      	lsrs	r3, r3, #6
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fbc0 	bl	8000e3e <HAL_SYSTICK_Config>
	 	// either hclck/8 or hclck so we decided hclk
	 	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006be:	2004      	movs	r0, #4
 80006c0:	f000 fbca 	bl	8000e58 <HAL_SYSTICK_CLKSourceConfig>


}
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	10624dd3 	.word	0x10624dd3

080006d0 <TIM1_Init>:
static void TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]
 80006e6:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <TIM1_Init+0x7c>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	; (8000750 <TIM1_Init+0x80>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <TIM1_Init+0x7c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <TIM1_Init+0x7c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <TIM1_Init+0x7c>)
 80006fc:	2259      	movs	r2, #89	; 0x59
 80006fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <TIM1_Init+0x7c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <TIM1_Init+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <TIM1_Init+0x7c>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <TIM1_Init+0x7c>)
 8000714:	f001 fd5a 	bl	80021cc <HAL_TIM_PWM_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <TIM1_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f84d 	bl	80007bc <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000722:	2360      	movs	r3, #96	; 0x60
 8000724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <TIM1_Init+0x7c>)
 8000736:	f002 f833 	bl	80027a0 <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <TIM1_Init+0x74>
  {
    Error_Handler();
 8000740:	f000 f83c 	bl	80007bc <Error_Handler>
  }



}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200004a8 	.word	0x200004a8
 8000750:	40010000 	.word	0x40010000

08000754 <DMA_Init>:
/**
  * Enable DMA controller clock
  */
static void DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <DMA_Init+0x3c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <DMA_Init+0x3c>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <DMA_Init+0x3c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2039      	movs	r0, #57	; 0x39
 800077c:	f000 fb35 	bl	8000dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000780:	2039      	movs	r0, #57	; 0x39
 8000782:	f000 fb4e 	bl	8000e22 <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800079c:	2100      	movs	r1, #0
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80007a0:	f001 ff2c 	bl	80025fc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200004a8 	.word	0x200004a8
 80007b8:	20000550 	.word	0x20000550

080007bc <Error_Handler>:

void Error_Handler(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	printf("error occured\n");
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <Error_Handler+0xc>)
 80007c2:	f002 fd0f 	bl	80031e4 <puts>
	while(1);
 80007c6:	e7fe      	b.n	80007c6 <Error_Handler+0xa>
 80007c8:	0800392c 	.word	0x0800392c

080007cc <HAL_MspInit>:
 */
#include "main.h"
extern DMA_HandleTypeDef hdma_tim1_ch1;
//will do low level processor specific inits.
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_MspInit+0x7c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_MspInit+0x7c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_MspInit+0x7c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_MspInit+0x7c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_MspInit+0x7c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x7c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080a:	2003      	movs	r0, #3
 800080c:	f000 fae2 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_MspInit+0x80>)
 8000812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <HAL_MspInit+0x80>)
 8000816:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800081a:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	f06f 000b 	mvn.w	r0, #11
 8000824:	f000 fae1 	bl	8000dea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	f06f 000a 	mvn.w	r0, #10
 8000830:	f000 fadb 	bl	8000dea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	f06f 0009 	mvn.w	r0, #9
 800083c:	f000 fad5 	bl	8000dea <HAL_NVIC_SetPriority>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a35      	ldr	r2, [pc, #212]	; (8000934 <HAL_TIM_PWM_MspInit+0xe4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d164      	bne.n	800092c <HAL_TIM_PWM_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800087e:	4b2f      	ldr	r3, [pc, #188]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 8000880:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <HAL_TIM_PWM_MspInit+0xf0>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000884:	4b2d      	ldr	r3, [pc, #180]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 8000886:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800088a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 800088e:	2240      	movs	r2, #64	; 0x40
 8000890:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 800089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ae:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80008c2:	481e      	ldr	r0, [pc, #120]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008c4:	f000 fae4 	bl	8000e90 <HAL_DMA_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80008ce:	f7ff ff75 	bl	80007bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
 80008d8:	4a18      	ldr	r2, [pc, #96]	; (800093c <HAL_TIM_PWM_MspInit+0xec>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_TIM_PWM_MspInit+0xe8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <HAL_TIM_PWM_MspInit+0xf4>)
 8000928:	f000 fe44 	bl	80015b4 <HAL_GPIO_Init>
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010000 	.word	0x40010000
 8000938:	40023800 	.word	0x40023800
 800093c:	200004f0 	.word	0x200004f0
 8000940:	40026428 	.word	0x40026428
 8000944:	40021000 	.word	0x40021000

08000948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
  }

  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e009      	b.n	80009a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf1      	blt.n	8000994 <_write+0x12>
  }
  return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_close>:

int _close(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e2:	605a      	str	r2, [r3, #4]
  return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_isatty>:

int _isatty(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f002 fcf4 	bl	8003440 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20020000 	.word	0x20020000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000554 	.word	0x20000554
 8000a8c:	200006a8 	.word	0x200006a8

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aba:	490e      	ldr	r1, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	; (8000b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ade:	f7ff ffd7 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f002 fcb3 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd57 	bl	8000598 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000af8:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 8000afc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b00:	200006a8 	.word	0x200006a8

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f94f 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe46 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f967 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f92f 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000558 	.word	0x20000558

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000558 	.word	0x20000558

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff3e 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff31 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d106      	bne.n	8000e74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e72:	e005      	b.n	8000e80 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e7a:	f023 0304 	bic.w	r3, r3, #4
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fe9a 	bl	8000bd4 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e099      	b.n	8000fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ecc:	e00f      	b.n	8000eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ece:	f7ff fe81 	bl	8000bd4 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d908      	bls.n	8000eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e078      	b.n	8000fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e8      	bne.n	8000ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <HAL_DMA_Init+0x158>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d107      	bne.n	8000f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4313      	orrs	r3, r2
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f023 0307 	bic.w	r3, r3, #7
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d117      	bne.n	8000fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00e      	beq.n	8000fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 fa91 	bl	80014bc <DMA_CheckFifoParam>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2240      	movs	r2, #64	; 0x40
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e016      	b.n	8000fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fa48 	bl	8001450 <DMA_CalcBaseAndBitshift>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	223f      	movs	r2, #63	; 0x3f
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	f010803f 	.word	0xf010803f

08000fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_DMA_Start_IT+0x26>
 800100e:	2302      	movs	r3, #2
 8001010:	e040      	b.n	8001094 <HAL_DMA_Start_IT+0xa8>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12f      	bne.n	8001086 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2202      	movs	r2, #2
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f9da 	bl	80013f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	223f      	movs	r2, #63	; 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0216 	orr.w	r2, r2, #22
 800105a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e005      	b.n	8001092 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800108e:	2302      	movs	r3, #2
 8001090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d004      	beq.n	80010ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00c      	b.n	80010d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010ec:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <HAL_DMA_IRQHandler+0x248>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a8e      	ldr	r2, [pc, #568]	; (800132c <HAL_DMA_IRQHandler+0x24c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0a9b      	lsrs	r3, r3, #10
 80010f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110a:	2208      	movs	r2, #8
 800110c:	409a      	lsls	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01a      	beq.n	800114c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0204 	bic.w	r2, r2, #4
 8001132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2208      	movs	r2, #8
 800113a:	409a      	lsls	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2201      	movs	r2, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d012      	beq.n	8001182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	2201      	movs	r2, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	f043 0202 	orr.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2204      	movs	r2, #4
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d012      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00b      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2204      	movs	r2, #4
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	f043 0204 	orr.w	r2, r3, #4
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2210      	movs	r2, #16
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d043      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03c      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2210      	movs	r2, #16
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d018      	beq.n	8001222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d024      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
 800120e:	e01f      	b.n	8001250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01b      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
 8001220:	e016      	b.n	8001250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0208 	bic.w	r2, r2, #8
 800123e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2220      	movs	r2, #32
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 808f 	beq.w	8001380 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8087 	beq.w	8001380 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	2220      	movs	r2, #32
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b05      	cmp	r3, #5
 8001288:	d136      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0216 	bic.w	r2, r2, #22
 8001298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d103      	bne.n	80012ba <HAL_DMA_IRQHandler+0x1da>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0208 	bic.w	r2, r2, #8
 80012c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	223f      	movs	r2, #63	; 0x3f
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d07e      	beq.n	80013ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
        }
        return;
 80012f6:	e079      	b.n	80013ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d01d      	beq.n	8001342 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10d      	bne.n	8001330 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	2b00      	cmp	r3, #0
 800131a:	d031      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
 8001324:	e02c      	b.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
 8001340:	e01e      	b.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10f      	bne.n	8001370 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0210 	bic.w	r2, r2, #16
 800135e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	2b00      	cmp	r3, #0
 8001386:	d032      	beq.n	80013ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d022      	beq.n	80013da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2205      	movs	r2, #5
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d307      	bcc.n	80013c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f2      	bne.n	80013ac <HAL_DMA_IRQHandler+0x2cc>
 80013c6:	e000      	b.n	80013ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
 80013ea:	e000      	b.n	80013ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80013ec:	bf00      	nop
    }
  }
}
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b40      	cmp	r3, #64	; 0x40
 8001420:	d108      	bne.n	8001434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001432:	e007      	b.n	8001444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3b10      	subs	r3, #16
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <DMA_CalcBaseAndBitshift+0x68>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d909      	bls.n	8001492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	1d1a      	adds	r2, r3, #4
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	659a      	str	r2, [r3, #88]	; 0x58
 8001490:	e007      	b.n	80014a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	aaaaaaab 	.word	0xaaaaaaab
 80014b8:	0800394c 	.word	0x0800394c

080014bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11f      	bne.n	8001516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d856      	bhi.n	800158a <DMA_CheckFifoParam+0xce>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <DMA_CheckFifoParam+0x28>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	08001507 	.word	0x08001507
 80014ec:	080014f5 	.word	0x080014f5
 80014f0:	0800158b 	.word	0x0800158b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d046      	beq.n	800158e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001504:	e043      	b.n	800158e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800150e:	d140      	bne.n	8001592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001514:	e03d      	b.n	8001592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151e:	d121      	bne.n	8001564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d837      	bhi.n	8001596 <DMA_CheckFifoParam+0xda>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <DMA_CheckFifoParam+0x70>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001543 	.word	0x08001543
 8001534:	0800153d 	.word	0x0800153d
 8001538:	08001555 	.word	0x08001555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      break;
 8001540:	e030      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d025      	beq.n	800159a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001552:	e022      	b.n	800159a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800155c:	d11f      	bne.n	800159e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001562:	e01c      	b.n	800159e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d903      	bls.n	8001572 <DMA_CheckFifoParam+0xb6>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d003      	beq.n	8001578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001570:	e018      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      break;
 8001576:	e015      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
      break;
 8001588:	e00b      	b.n	80015a2 <DMA_CheckFifoParam+0xe6>
      break;
 800158a:	bf00      	nop
 800158c:	e00a      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 800158e:	bf00      	nop
 8001590:	e008      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001592:	bf00      	nop
 8001594:	e006      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
 8001598:	e004      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 800159a:	bf00      	nop
 800159c:	e002      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800159e:	bf00      	nop
 80015a0:	e000      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 80015a2:	bf00      	nop
    }
  } 
  
  return status; 
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e16b      	b.n	80018a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 815a 	bne.w	80018a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d005      	beq.n	8001606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	2b02      	cmp	r3, #2
 8001604:	d130      	bne.n	8001668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 0201 	and.w	r2, r3, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d017      	beq.n	80016a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d123      	bne.n	80016f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80b4 	beq.w	80018a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <HAL_GPIO_Init+0x30c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <HAL_GPIO_Init+0x30c>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_GPIO_Init+0x30c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001756:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_GPIO_Init+0x310>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_GPIO_Init+0x314>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x318>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_GPIO_Init+0x31c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x320>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x324>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x216>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x328>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x212>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x32c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x330>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x20a>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e00e      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017be:	2308      	movs	r3, #8
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x228>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x310>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_GPIO_Init+0x334>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_GPIO_Init+0x334>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_GPIO_Init+0x334>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_GPIO_Init+0x334>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_GPIO_Init+0x334>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_GPIO_Init+0x334>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_GPIO_Init+0x334>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_GPIO_Init+0x334>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae90 	bls.w	80015d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e267      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d075      	beq.n	80019f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d00c      	beq.n	8001930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191e:	2b08      	cmp	r3, #8
 8001920:	d112      	bne.n	8001948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192e:	d10b      	bne.n	8001948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4b7e      	ldr	r3, [pc, #504]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05b      	beq.n	80019f4 <HAL_RCC_OscConfig+0x108>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d157      	bne.n	80019f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e242      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x74>
 8001952:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a75      	ldr	r2, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a6f      	ldr	r2, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6c      	ldr	r2, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001984:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a68      	ldr	r2, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f916 	bl	8000bd4 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f912 	bl	8000bd4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e207      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xc0>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f902 	bl	8000bd4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff f8fe 	bl	8000bd4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1f3      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0xe8>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x152>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1c7      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_OscConfig+0x244>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f8b7 	bl	8000bd4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8b3 	bl	8000bd4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1a8      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_OscConfig+0x244>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f896 	bl	8000bd4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff f892 	bl	8000bd4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e187      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d036      	beq.n	8001b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d016      	beq.n	8001b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_OscConfig+0x248>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f876 	bl	8000bd4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f872 	bl	8000bd4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e167      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x240>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x200>
 8001b0a:	e01b      	b.n	8001b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_OscConfig+0x248>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f85f 	bl	8000bd4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e00e      	b.n	8001b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f85b 	bl	8000bd4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d907      	bls.n	8001b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e150      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ea      	bne.n	8001b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8097 	beq.w	8001c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b81      	ldr	r3, [pc, #516]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b7d      	ldr	r3, [pc, #500]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a7c      	ldr	r2, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b77      	ldr	r3, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x474>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b74      	ldr	r3, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x474>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x474>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f81b 	bl	8000bd4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff f817 	bl	8000bd4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e10c      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x474>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2ea>
 8001bc8:	4b64      	ldr	r3, [pc, #400]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a63      	ldr	r2, [pc, #396]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x324>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x30c>
 8001bde:	4b5f      	ldr	r3, [pc, #380]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5e      	ldr	r2, [pc, #376]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a5b      	ldr	r2, [pc, #364]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0x324>
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a57      	ldr	r2, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a54      	ldr	r2, [pc, #336]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d015      	beq.n	8001c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7fe ffdc 	bl	8000bd4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7fe ffd8 	bl	8000bd4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0cb      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0ee      	beq.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe ffc6 	bl	8000bd4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7fe ffc2 	bl	8000bd4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0b5      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ee      	bne.n	8001c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a1 	beq.w	8001dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d05c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d141      	bne.n	8001d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff96 	bl	8000bd4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ff92 	bl	8000bd4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e087      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	491b      	ldr	r1, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x478>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7fe ff6b 	bl	8000bd4 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7fe ff67 	bl	8000bd4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e05c      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x416>
 8001d20:	e054      	b.n	8001dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x478>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe ff54 	bl	8000bd4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff50 	bl	8000bd4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e045      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x470>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x444>
 8001d4e:	e03d      	b.n	8001dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e038      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x4ec>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d028      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d121      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d11a      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0cc      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d90c      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d044      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e067      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fe82 	bl	8000bd4 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe fe7e 	bl	8000bd4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e04f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d20c      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fde2 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	0800393c 	.word	0x0800393c
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fac:	b094      	sub	sp, #80	; 0x50
 8001fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb8:	2300      	movs	r3, #0
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc0:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d00d      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	f200 80e1 	bhi.w	8002194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x34>
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fda:	e0db      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b73      	ldr	r3, [pc, #460]	; (80021ac <HAL_RCC_GetSysClockFreq+0x204>)
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fe0:	e0db      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fe6:	e0d8      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d063      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	2200      	movs	r2, #0
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
 8002008:	63fa      	str	r2, [r7, #60]	; 0x3c
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
 8002012:	2300      	movs	r3, #0
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
 8002016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4621      	mov	r1, r4
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	6139      	str	r1, [r7, #16]
 8002038:	4629      	mov	r1, r5
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800204c:	4659      	mov	r1, fp
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	4651      	mov	r1, sl
 8002052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002056:	4651      	mov	r1, sl
 8002058:	018a      	lsls	r2, r1, #6
 800205a:	4651      	mov	r1, sl
 800205c:	ebb2 0801 	subs.w	r8, r2, r1
 8002060:	4659      	mov	r1, fp
 8002062:	eb63 0901 	sbc.w	r9, r3, r1
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	4623      	mov	r3, r4
 8002080:	eb18 0303 	adds.w	r3, r8, r3
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	462b      	mov	r3, r5
 8002088:	eb49 0303 	adc.w	r3, r9, r3
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800209a:	4629      	mov	r1, r5
 800209c:	024b      	lsls	r3, r1, #9
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020a4:	4621      	mov	r1, r4
 80020a6:	024a      	lsls	r2, r1, #9
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	2200      	movs	r2, #0
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020b8:	f7fe f886 	bl	80001c8 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c4:	e058      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	2200      	movs	r2, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	4611      	mov	r1, r2
 80020d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020e0:	4642      	mov	r2, r8
 80020e2:	464b      	mov	r3, r9
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	0159      	lsls	r1, r3, #5
 80020ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f2:	0150      	lsls	r0, r2, #5
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4641      	mov	r1, r8
 80020fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80020fe:	4649      	mov	r1, r9
 8002100:	eb63 0b01 	sbc.w	fp, r3, r1
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002118:	ebb2 040a 	subs.w	r4, r2, sl
 800211c:	eb63 050b 	sbc.w	r5, r3, fp
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	00eb      	lsls	r3, r5, #3
 800212a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800212e:	00e2      	lsls	r2, r4, #3
 8002130:	4614      	mov	r4, r2
 8002132:	461d      	mov	r5, r3
 8002134:	4643      	mov	r3, r8
 8002136:	18e3      	adds	r3, r4, r3
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	464b      	mov	r3, r9
 800213c:	eb45 0303 	adc.w	r3, r5, r3
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800214e:	4629      	mov	r1, r5
 8002150:	028b      	lsls	r3, r1, #10
 8002152:	4621      	mov	r1, r4
 8002154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002158:	4621      	mov	r1, r4
 800215a:	028a      	lsls	r2, r1, #10
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002162:	2200      	movs	r2, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	61fa      	str	r2, [r7, #28]
 8002168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216c:	f7fe f82c 	bl	80001c8 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4613      	mov	r3, r2
 8002176:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002192:	e002      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800219c:	4618      	mov	r0, r3
 800219e:	3750      	adds	r7, #80	; 0x50
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	007a1200 	.word	0x007a1200

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fb2c 	bl	8000850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fc70 	bl	8002af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e022      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x72>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d109      	bne.n	80022b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e015      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x72>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d109      	bne.n	80022cc <HAL_TIM_PWM_Start_DMA+0x60>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e008      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x72>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e171      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_TIM_PWM_Start_DMA+0x94>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e022      	b.n	8002346 <HAL_TIM_PWM_Start_DMA+0xda>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b04      	cmp	r3, #4
 8002304:	d109      	bne.n	800231a <HAL_TIM_PWM_Start_DMA+0xae>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e015      	b.n	8002346 <HAL_TIM_PWM_Start_DMA+0xda>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d109      	bne.n	8002334 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e008      	b.n	8002346 <HAL_TIM_PWM_Start_DMA+0xda>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d024      	beq.n	8002394 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_TIM_PWM_Start_DMA+0xee>
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e137      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002368:	e016      	b.n	8002398 <HAL_TIM_PWM_Start_DMA+0x12c>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d104      	bne.n	800237a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002378:	e00e      	b.n	8002398 <HAL_TIM_PWM_Start_DMA+0x12c>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d104      	bne.n	800238a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002388:	e006      	b.n	8002398 <HAL_TIM_PWM_Start_DMA+0x12c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002392:	e001      	b.n	8002398 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e118      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	f200 80ae 	bhi.w	80024fc <HAL_TIM_PWM_Start_DMA+0x290>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	080023dd 	.word	0x080023dd
 80023ac:	080024fd 	.word	0x080024fd
 80023b0:	080024fd 	.word	0x080024fd
 80023b4:	080024fd 	.word	0x080024fd
 80023b8:	08002425 	.word	0x08002425
 80023bc:	080024fd 	.word	0x080024fd
 80023c0:	080024fd 	.word	0x080024fd
 80023c4:	080024fd 	.word	0x080024fd
 80023c8:	0800246d 	.word	0x0800246d
 80023cc:	080024fd 	.word	0x080024fd
 80023d0:	080024fd 	.word	0x080024fd
 80023d4:	080024fd 	.word	0x080024fd
 80023d8:	080024b5 	.word	0x080024b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	4a7c      	ldr	r2, [pc, #496]	; (80025d4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	4a7b      	ldr	r2, [pc, #492]	; (80025d8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_TIM_PWM_Start_DMA+0x370>)
 80023f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3334      	adds	r3, #52	; 0x34
 8002400:	461a      	mov	r2, r3
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	f7fe fdf2 	bl	8000fec <HAL_DMA_Start_IT>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0db      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002420:	60da      	str	r2, [r3, #12]
      break;
 8002422:	e06e      	b.n	8002502 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_TIM_PWM_Start_DMA+0x370>)
 800243a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3338      	adds	r3, #56	; 0x38
 8002448:	461a      	mov	r2, r3
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	f7fe fdce 	bl	8000fec <HAL_DMA_Start_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0b7      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002468:	60da      	str	r2, [r3, #12]
      break;
 800246a:	e04a      	b.n	8002502 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800247a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_TIM_PWM_Start_DMA+0x370>)
 8002482:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	333c      	adds	r3, #60	; 0x3c
 8002490:	461a      	mov	r2, r3
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	f7fe fdaa 	bl	8000fec <HAL_DMA_Start_IT>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e093      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b0:	60da      	str	r2, [r3, #12]
      break;
 80024b2:	e026      	b.n	8002502 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a45      	ldr	r2, [pc, #276]	; (80025d8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4a44      	ldr	r2, [pc, #272]	; (80025dc <HAL_TIM_PWM_Start_DMA+0x370>)
 80024ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3340      	adds	r3, #64	; 0x40
 80024d8:	461a      	mov	r2, r3
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	f7fe fd86 	bl	8000fec <HAL_DMA_Start_IT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024f8:	60da      	str	r2, [r3, #12]
      break;
 80024fa:	e002      	b.n	8002502 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002500:	bf00      	nop
  }

  if (status == HAL_OK)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d15f      	bne.n	80025c8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd3d 	bl	8002f90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_TIM_PWM_Start_DMA+0x2be>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d022      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d01d      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d018      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_TIM_PWM_Start_DMA+0x380>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIM_PWM_Start_DMA+0x328>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d010      	beq.n	80025c8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	080029df 	.word	0x080029df
 80025d8:	08002a87 	.word	0x08002a87
 80025dc:	0800294d 	.word	0x0800294d
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40010400 	.word	0x40010400
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40014000 	.word	0x40014000
 80025f8:	40001800 	.word	0x40001800

080025fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d855      	bhi.n	80026bc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002610:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002616:	bf00      	nop
 8002618:	0800264d 	.word	0x0800264d
 800261c:	080026bd 	.word	0x080026bd
 8002620:	080026bd 	.word	0x080026bd
 8002624:	080026bd 	.word	0x080026bd
 8002628:	08002669 	.word	0x08002669
 800262c:	080026bd 	.word	0x080026bd
 8002630:	080026bd 	.word	0x080026bd
 8002634:	080026bd 	.word	0x080026bd
 8002638:	08002685 	.word	0x08002685
 800263c:	080026bd 	.word	0x080026bd
 8002640:	080026bd 	.word	0x080026bd
 8002644:	080026bd 	.word	0x080026bd
 8002648:	080026a1 	.word	0x080026a1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fd1b 	bl	800109c <HAL_DMA_Abort_IT>
      break;
 8002666:	e02c      	b.n	80026c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002676:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fd0d 	bl	800109c <HAL_DMA_Abort_IT>
      break;
 8002682:	e01e      	b.n	80026c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002692:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fcff 	bl	800109c <HAL_DMA_Abort_IT>
      break;
 800269e:	e010      	b.n	80026c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fcf1 	bl	800109c <HAL_DMA_Abort_IT>
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d161      	bne.n	800278c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fc5d 	bl	8002f90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_TIM_PWM_Stop_DMA+0xee>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_PWM_Stop_DMA+0xf2>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	f240 4344 	movw	r3, #1092	; 0x444
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	f241 1311 	movw	r3, #4369	; 0x1111
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10f      	bne.n	8002754 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	f240 4344 	movw	r3, #1092	; 0x444
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_TIM_PWM_Stop_DMA+0x168>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002762:	e013      	b.n	800278c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d104      	bne.n	8002774 <HAL_TIM_PWM_Stop_DMA+0x178>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002772:	e00b      	b.n	800278c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d104      	bne.n	8002784 <HAL_TIM_PWM_Stop_DMA+0x188>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002782:	e003      	b.n	800278c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40010000 	.word	0x40010000
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0ae      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	f200 809f 	bhi.w	800290c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	08002809 	.word	0x08002809
 80027d8:	0800290d 	.word	0x0800290d
 80027dc:	0800290d 	.word	0x0800290d
 80027e0:	0800290d 	.word	0x0800290d
 80027e4:	08002849 	.word	0x08002849
 80027e8:	0800290d 	.word	0x0800290d
 80027ec:	0800290d 	.word	0x0800290d
 80027f0:	0800290d 	.word	0x0800290d
 80027f4:	0800288b 	.word	0x0800288b
 80027f8:	0800290d 	.word	0x0800290d
 80027fc:	0800290d 	.word	0x0800290d
 8002800:	0800290d 	.word	0x0800290d
 8002804:	080028cb 	.word	0x080028cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fa0e 	bl	8002c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0208 	orr.w	r2, r2, #8
 8002822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6999      	ldr	r1, [r3, #24]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	619a      	str	r2, [r3, #24]
      break;
 8002846:	e064      	b.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fa5e 	bl	8002d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6999      	ldr	r1, [r3, #24]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	021a      	lsls	r2, r3, #8
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	619a      	str	r2, [r3, #24]
      break;
 8002888:	e043      	b.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fab3 	bl	8002dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0208 	orr.w	r2, r2, #8
 80028a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0204 	bic.w	r2, r2, #4
 80028b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	61da      	str	r2, [r3, #28]
      break;
 80028c8:	e023      	b.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fb07 	bl	8002ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	61da      	str	r2, [r3, #28]
      break;
 800290a:	e002      	b.n	8002912 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	75fb      	strb	r3, [r7, #23]
      break;
 8002910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002972:	e02a      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d107      	bne.n	800298e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	e01d      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2204      	movs	r2, #4
 800299c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a6:	e010      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d107      	bne.n	80029c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2208      	movs	r2, #8
 80029b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c0:	e003      	b.n	80029ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ffb4 	bl	8002938 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10b      	bne.n	8002a0e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d136      	bne.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	e031      	b.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10b      	bne.n	8002a30 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d125      	bne.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2e:	e020      	b.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10b      	bne.n	8002a52 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d114      	bne.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a50:	e00f      	b.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10a      	bne.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7fd fe8e 	bl	8000794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d103      	bne.n	8002aa6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	771a      	strb	r2, [r3, #28]
 8002aa4:	e019      	b.n	8002ada <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d103      	bne.n	8002ab8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	771a      	strb	r2, [r3, #28]
 8002ab6:	e010      	b.n	8002ada <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d103      	bne.n	8002aca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	771a      	strb	r2, [r3, #28]
 8002ac8:	e007      	b.n	8002ada <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d102      	bne.n	8002ada <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff ff22 	bl	8002924 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	771a      	strb	r2, [r3, #28]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <TIM_Base_SetConfig+0x114>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0e:	d00f      	beq.n	8002b30 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	; (8002c08 <TIM_Base_SetConfig+0x118>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3c      	ldr	r2, [pc, #240]	; (8002c0c <TIM_Base_SetConfig+0x11c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_Base_SetConfig+0x40>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a3b      	ldr	r2, [pc, #236]	; (8002c10 <TIM_Base_SetConfig+0x120>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_Base_SetConfig+0x40>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <TIM_Base_SetConfig+0x124>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <TIM_Base_SetConfig+0x114>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d02b      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d027      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <TIM_Base_SetConfig+0x118>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d023      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2b      	ldr	r2, [pc, #172]	; (8002c0c <TIM_Base_SetConfig+0x11c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <TIM_Base_SetConfig+0x120>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01b      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <TIM_Base_SetConfig+0x124>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d017      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <TIM_Base_SetConfig+0x128>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <TIM_Base_SetConfig+0x12c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00f      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <TIM_Base_SetConfig+0x130>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <TIM_Base_SetConfig+0x134>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <TIM_Base_SetConfig+0x138>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <TIM_Base_SetConfig+0x13c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <TIM_Base_SetConfig+0x114>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_Base_SetConfig+0xf8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <TIM_Base_SetConfig+0x124>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d103      	bne.n	8002bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800
 8002c10:	40000c00 	.word	0x40000c00
 8002c14:	40010400 	.word	0x40010400
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	40014400 	.word	0x40014400
 8002c20:	40014800 	.word	0x40014800
 8002c24:	40001800 	.word	0x40001800
 8002c28:	40001c00 	.word	0x40001c00
 8002c2c:	40002000 	.word	0x40002000

08002c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <TIM_OC1_SetConfig+0xd8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <TIM_OC1_SetConfig+0x64>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <TIM_OC1_SetConfig+0xdc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10c      	bne.n	8002cae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0308 	bic.w	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <TIM_OC1_SetConfig+0xd8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_OC1_SetConfig+0x8e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <TIM_OC1_SetConfig+0xdc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	621a      	str	r2, [r3, #32]
}
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010400 	.word	0x40010400

08002d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0210 	bic.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0320 	bic.w	r3, r3, #32
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_OC2_SetConfig+0xe4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_OC2_SetConfig+0x68>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <TIM_OC2_SetConfig+0xe8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10d      	bne.n	8002d94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <TIM_OC2_SetConfig+0xe4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_OC2_SetConfig+0x94>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <TIM_OC2_SetConfig+0xe8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d113      	bne.n	8002dcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010400 	.word	0x40010400

08002dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <TIM_OC3_SetConfig+0xe0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_OC3_SetConfig+0x66>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <TIM_OC3_SetConfig+0xe4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10d      	bne.n	8002e7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <TIM_OC3_SetConfig+0xe0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_OC3_SetConfig+0x92>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <TIM_OC3_SetConfig+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d113      	bne.n	8002eb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	621a      	str	r2, [r3, #32]
}
 8002ed0:	bf00      	nop
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	031b      	lsls	r3, r3, #12
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <TIM_OC4_SetConfig+0xa4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_OC4_SetConfig+0x68>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <TIM_OC4_SetConfig+0xa8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d109      	bne.n	8002f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40010400 	.word	0x40010400

08002f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1a      	ldr	r2, [r3, #32]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <std>:
 8002fdc:	2300      	movs	r3, #0
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fea:	6083      	str	r3, [r0, #8]
 8002fec:	8181      	strh	r1, [r0, #12]
 8002fee:	6643      	str	r3, [r0, #100]	; 0x64
 8002ff0:	81c2      	strh	r2, [r0, #14]
 8002ff2:	6183      	str	r3, [r0, #24]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	305c      	adds	r0, #92	; 0x5c
 8002ffa:	f000 f9d3 	bl	80033a4 <memset>
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <std+0x38>)
 8003000:	6263      	str	r3, [r4, #36]	; 0x24
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <std+0x3c>)
 8003004:	62a3      	str	r3, [r4, #40]	; 0x28
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <std+0x40>)
 8003008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <std+0x44>)
 800300c:	6224      	str	r4, [r4, #32]
 800300e:	6323      	str	r3, [r4, #48]	; 0x30
 8003010:	bd10      	pop	{r4, pc}
 8003012:	bf00      	nop
 8003014:	080031f5 	.word	0x080031f5
 8003018:	08003217 	.word	0x08003217
 800301c:	0800324f 	.word	0x0800324f
 8003020:	08003273 	.word	0x08003273

08003024 <stdio_exit_handler>:
 8003024:	4a02      	ldr	r2, [pc, #8]	; (8003030 <stdio_exit_handler+0xc>)
 8003026:	4903      	ldr	r1, [pc, #12]	; (8003034 <stdio_exit_handler+0x10>)
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <stdio_exit_handler+0x14>)
 800302a:	f000 b869 	b.w	8003100 <_fwalk_sglue>
 800302e:	bf00      	nop
 8003030:	2000000c 	.word	0x2000000c
 8003034:	08003795 	.word	0x08003795
 8003038:	20000018 	.word	0x20000018

0800303c <cleanup_stdio>:
 800303c:	6841      	ldr	r1, [r0, #4]
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <cleanup_stdio+0x34>)
 8003040:	4299      	cmp	r1, r3
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	d001      	beq.n	800304c <cleanup_stdio+0x10>
 8003048:	f000 fba4 	bl	8003794 <_fflush_r>
 800304c:	68a1      	ldr	r1, [r4, #8]
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <cleanup_stdio+0x38>)
 8003050:	4299      	cmp	r1, r3
 8003052:	d002      	beq.n	800305a <cleanup_stdio+0x1e>
 8003054:	4620      	mov	r0, r4
 8003056:	f000 fb9d 	bl	8003794 <_fflush_r>
 800305a:	68e1      	ldr	r1, [r4, #12]
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <cleanup_stdio+0x3c>)
 800305e:	4299      	cmp	r1, r3
 8003060:	d004      	beq.n	800306c <cleanup_stdio+0x30>
 8003062:	4620      	mov	r0, r4
 8003064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003068:	f000 bb94 	b.w	8003794 <_fflush_r>
 800306c:	bd10      	pop	{r4, pc}
 800306e:	bf00      	nop
 8003070:	2000055c 	.word	0x2000055c
 8003074:	200005c4 	.word	0x200005c4
 8003078:	2000062c 	.word	0x2000062c

0800307c <global_stdio_init.part.0>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <global_stdio_init.part.0+0x30>)
 8003080:	4c0b      	ldr	r4, [pc, #44]	; (80030b0 <global_stdio_init.part.0+0x34>)
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <global_stdio_init.part.0+0x38>)
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	4620      	mov	r0, r4
 8003088:	2200      	movs	r2, #0
 800308a:	2104      	movs	r1, #4
 800308c:	f7ff ffa6 	bl	8002fdc <std>
 8003090:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003094:	2201      	movs	r2, #1
 8003096:	2109      	movs	r1, #9
 8003098:	f7ff ffa0 	bl	8002fdc <std>
 800309c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80030a0:	2202      	movs	r2, #2
 80030a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a6:	2112      	movs	r1, #18
 80030a8:	f7ff bf98 	b.w	8002fdc <std>
 80030ac:	20000694 	.word	0x20000694
 80030b0:	2000055c 	.word	0x2000055c
 80030b4:	08003025 	.word	0x08003025

080030b8 <__sfp_lock_acquire>:
 80030b8:	4801      	ldr	r0, [pc, #4]	; (80030c0 <__sfp_lock_acquire+0x8>)
 80030ba:	f000 b9eb 	b.w	8003494 <__retarget_lock_acquire_recursive>
 80030be:	bf00      	nop
 80030c0:	2000069d 	.word	0x2000069d

080030c4 <__sfp_lock_release>:
 80030c4:	4801      	ldr	r0, [pc, #4]	; (80030cc <__sfp_lock_release+0x8>)
 80030c6:	f000 b9e6 	b.w	8003496 <__retarget_lock_release_recursive>
 80030ca:	bf00      	nop
 80030cc:	2000069d 	.word	0x2000069d

080030d0 <__sinit>:
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4604      	mov	r4, r0
 80030d4:	f7ff fff0 	bl	80030b8 <__sfp_lock_acquire>
 80030d8:	6a23      	ldr	r3, [r4, #32]
 80030da:	b11b      	cbz	r3, 80030e4 <__sinit+0x14>
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e0:	f7ff bff0 	b.w	80030c4 <__sfp_lock_release>
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__sinit+0x28>)
 80030e6:	6223      	str	r3, [r4, #32]
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <__sinit+0x2c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f5      	bne.n	80030dc <__sinit+0xc>
 80030f0:	f7ff ffc4 	bl	800307c <global_stdio_init.part.0>
 80030f4:	e7f2      	b.n	80030dc <__sinit+0xc>
 80030f6:	bf00      	nop
 80030f8:	0800303d 	.word	0x0800303d
 80030fc:	20000694 	.word	0x20000694

08003100 <_fwalk_sglue>:
 8003100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003104:	4607      	mov	r7, r0
 8003106:	4688      	mov	r8, r1
 8003108:	4614      	mov	r4, r2
 800310a:	2600      	movs	r6, #0
 800310c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003110:	f1b9 0901 	subs.w	r9, r9, #1
 8003114:	d505      	bpl.n	8003122 <_fwalk_sglue+0x22>
 8003116:	6824      	ldr	r4, [r4, #0]
 8003118:	2c00      	cmp	r4, #0
 800311a:	d1f7      	bne.n	800310c <_fwalk_sglue+0xc>
 800311c:	4630      	mov	r0, r6
 800311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d907      	bls.n	8003138 <_fwalk_sglue+0x38>
 8003128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800312c:	3301      	adds	r3, #1
 800312e:	d003      	beq.n	8003138 <_fwalk_sglue+0x38>
 8003130:	4629      	mov	r1, r5
 8003132:	4638      	mov	r0, r7
 8003134:	47c0      	blx	r8
 8003136:	4306      	orrs	r6, r0
 8003138:	3568      	adds	r5, #104	; 0x68
 800313a:	e7e9      	b.n	8003110 <_fwalk_sglue+0x10>

0800313c <_puts_r>:
 800313c:	6a03      	ldr	r3, [r0, #32]
 800313e:	b570      	push	{r4, r5, r6, lr}
 8003140:	6884      	ldr	r4, [r0, #8]
 8003142:	4605      	mov	r5, r0
 8003144:	460e      	mov	r6, r1
 8003146:	b90b      	cbnz	r3, 800314c <_puts_r+0x10>
 8003148:	f7ff ffc2 	bl	80030d0 <__sinit>
 800314c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800314e:	07db      	lsls	r3, r3, #31
 8003150:	d405      	bmi.n	800315e <_puts_r+0x22>
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	0598      	lsls	r0, r3, #22
 8003156:	d402      	bmi.n	800315e <_puts_r+0x22>
 8003158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315a:	f000 f99b 	bl	8003494 <__retarget_lock_acquire_recursive>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	0719      	lsls	r1, r3, #28
 8003162:	d513      	bpl.n	800318c <_puts_r+0x50>
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	b18b      	cbz	r3, 800318c <_puts_r+0x50>
 8003168:	3e01      	subs	r6, #1
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003170:	3b01      	subs	r3, #1
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	b9e9      	cbnz	r1, 80031b2 <_puts_r+0x76>
 8003176:	2b00      	cmp	r3, #0
 8003178:	da2e      	bge.n	80031d8 <_puts_r+0x9c>
 800317a:	4622      	mov	r2, r4
 800317c:	210a      	movs	r1, #10
 800317e:	4628      	mov	r0, r5
 8003180:	f000 f87b 	bl	800327a <__swbuf_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d007      	beq.n	8003198 <_puts_r+0x5c>
 8003188:	250a      	movs	r5, #10
 800318a:	e007      	b.n	800319c <_puts_r+0x60>
 800318c:	4621      	mov	r1, r4
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f8b0 	bl	80032f4 <__swsetup_r>
 8003194:	2800      	cmp	r0, #0
 8003196:	d0e7      	beq.n	8003168 <_puts_r+0x2c>
 8003198:	f04f 35ff 	mov.w	r5, #4294967295
 800319c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800319e:	07da      	lsls	r2, r3, #31
 80031a0:	d405      	bmi.n	80031ae <_puts_r+0x72>
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	059b      	lsls	r3, r3, #22
 80031a6:	d402      	bmi.n	80031ae <_puts_r+0x72>
 80031a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031aa:	f000 f974 	bl	8003496 <__retarget_lock_release_recursive>
 80031ae:	4628      	mov	r0, r5
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da04      	bge.n	80031c0 <_puts_r+0x84>
 80031b6:	69a2      	ldr	r2, [r4, #24]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	dc06      	bgt.n	80031ca <_puts_r+0x8e>
 80031bc:	290a      	cmp	r1, #10
 80031be:	d004      	beq.n	80031ca <_puts_r+0x8e>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	6022      	str	r2, [r4, #0]
 80031c6:	7019      	strb	r1, [r3, #0]
 80031c8:	e7cf      	b.n	800316a <_puts_r+0x2e>
 80031ca:	4622      	mov	r2, r4
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 f854 	bl	800327a <__swbuf_r>
 80031d2:	3001      	adds	r0, #1
 80031d4:	d1c9      	bne.n	800316a <_puts_r+0x2e>
 80031d6:	e7df      	b.n	8003198 <_puts_r+0x5c>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	250a      	movs	r5, #10
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	701d      	strb	r5, [r3, #0]
 80031e2:	e7db      	b.n	800319c <_puts_r+0x60>

080031e4 <puts>:
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <puts+0xc>)
 80031e6:	4601      	mov	r1, r0
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f7ff bfa7 	b.w	800313c <_puts_r>
 80031ee:	bf00      	nop
 80031f0:	20000064 	.word	0x20000064

080031f4 <__sread>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	460c      	mov	r4, r1
 80031f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fc:	f000 f8fc 	bl	80033f8 <_read_r>
 8003200:	2800      	cmp	r0, #0
 8003202:	bfab      	itete	ge
 8003204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003206:	89a3      	ldrhlt	r3, [r4, #12]
 8003208:	181b      	addge	r3, r3, r0
 800320a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800320e:	bfac      	ite	ge
 8003210:	6563      	strge	r3, [r4, #84]	; 0x54
 8003212:	81a3      	strhlt	r3, [r4, #12]
 8003214:	bd10      	pop	{r4, pc}

08003216 <__swrite>:
 8003216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	461f      	mov	r7, r3
 800321c:	898b      	ldrh	r3, [r1, #12]
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	4616      	mov	r6, r2
 8003226:	d505      	bpl.n	8003234 <__swrite+0x1e>
 8003228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322c:	2302      	movs	r3, #2
 800322e:	2200      	movs	r2, #0
 8003230:	f000 f8d0 	bl	80033d4 <_lseek_r>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800323a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800323e:	81a3      	strh	r3, [r4, #12]
 8003240:	4632      	mov	r2, r6
 8003242:	463b      	mov	r3, r7
 8003244:	4628      	mov	r0, r5
 8003246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800324a:	f000 b8e7 	b.w	800341c <_write_r>

0800324e <__sseek>:
 800324e:	b510      	push	{r4, lr}
 8003250:	460c      	mov	r4, r1
 8003252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003256:	f000 f8bd 	bl	80033d4 <_lseek_r>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	bf15      	itete	ne
 8003260:	6560      	strne	r0, [r4, #84]	; 0x54
 8003262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800326a:	81a3      	strheq	r3, [r4, #12]
 800326c:	bf18      	it	ne
 800326e:	81a3      	strhne	r3, [r4, #12]
 8003270:	bd10      	pop	{r4, pc}

08003272 <__sclose>:
 8003272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003276:	f000 b89d 	b.w	80033b4 <_close_r>

0800327a <__swbuf_r>:
 800327a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327c:	460e      	mov	r6, r1
 800327e:	4614      	mov	r4, r2
 8003280:	4605      	mov	r5, r0
 8003282:	b118      	cbz	r0, 800328c <__swbuf_r+0x12>
 8003284:	6a03      	ldr	r3, [r0, #32]
 8003286:	b90b      	cbnz	r3, 800328c <__swbuf_r+0x12>
 8003288:	f7ff ff22 	bl	80030d0 <__sinit>
 800328c:	69a3      	ldr	r3, [r4, #24]
 800328e:	60a3      	str	r3, [r4, #8]
 8003290:	89a3      	ldrh	r3, [r4, #12]
 8003292:	071a      	lsls	r2, r3, #28
 8003294:	d525      	bpl.n	80032e2 <__swbuf_r+0x68>
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	b31b      	cbz	r3, 80032e2 <__swbuf_r+0x68>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	6922      	ldr	r2, [r4, #16]
 800329e:	1a98      	subs	r0, r3, r2
 80032a0:	6963      	ldr	r3, [r4, #20]
 80032a2:	b2f6      	uxtb	r6, r6
 80032a4:	4283      	cmp	r3, r0
 80032a6:	4637      	mov	r7, r6
 80032a8:	dc04      	bgt.n	80032b4 <__swbuf_r+0x3a>
 80032aa:	4621      	mov	r1, r4
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 fa71 	bl	8003794 <_fflush_r>
 80032b2:	b9e0      	cbnz	r0, 80032ee <__swbuf_r+0x74>
 80032b4:	68a3      	ldr	r3, [r4, #8]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	6022      	str	r2, [r4, #0]
 80032c0:	701e      	strb	r6, [r3, #0]
 80032c2:	6962      	ldr	r2, [r4, #20]
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d004      	beq.n	80032d4 <__swbuf_r+0x5a>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	07db      	lsls	r3, r3, #31
 80032ce:	d506      	bpl.n	80032de <__swbuf_r+0x64>
 80032d0:	2e0a      	cmp	r6, #10
 80032d2:	d104      	bne.n	80032de <__swbuf_r+0x64>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 fa5c 	bl	8003794 <_fflush_r>
 80032dc:	b938      	cbnz	r0, 80032ee <__swbuf_r+0x74>
 80032de:	4638      	mov	r0, r7
 80032e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e2:	4621      	mov	r1, r4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f000 f805 	bl	80032f4 <__swsetup_r>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0d5      	beq.n	800329a <__swbuf_r+0x20>
 80032ee:	f04f 37ff 	mov.w	r7, #4294967295
 80032f2:	e7f4      	b.n	80032de <__swbuf_r+0x64>

080032f4 <__swsetup_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <__swsetup_r+0xac>)
 80032f8:	4605      	mov	r5, r0
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	460c      	mov	r4, r1
 80032fe:	b118      	cbz	r0, 8003308 <__swsetup_r+0x14>
 8003300:	6a03      	ldr	r3, [r0, #32]
 8003302:	b90b      	cbnz	r3, 8003308 <__swsetup_r+0x14>
 8003304:	f7ff fee4 	bl	80030d0 <__sinit>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800330e:	0718      	lsls	r0, r3, #28
 8003310:	d422      	bmi.n	8003358 <__swsetup_r+0x64>
 8003312:	06d9      	lsls	r1, r3, #27
 8003314:	d407      	bmi.n	8003326 <__swsetup_r+0x32>
 8003316:	2309      	movs	r3, #9
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	e034      	b.n	8003390 <__swsetup_r+0x9c>
 8003326:	0758      	lsls	r0, r3, #29
 8003328:	d512      	bpl.n	8003350 <__swsetup_r+0x5c>
 800332a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800332c:	b141      	cbz	r1, 8003340 <__swsetup_r+0x4c>
 800332e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003332:	4299      	cmp	r1, r3
 8003334:	d002      	beq.n	800333c <__swsetup_r+0x48>
 8003336:	4628      	mov	r0, r5
 8003338:	f000 f8ae 	bl	8003498 <_free_r>
 800333c:	2300      	movs	r3, #0
 800333e:	6363      	str	r3, [r4, #52]	; 0x34
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003346:	81a3      	strh	r3, [r4, #12]
 8003348:	2300      	movs	r3, #0
 800334a:	6063      	str	r3, [r4, #4]
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	81a3      	strh	r3, [r4, #12]
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	b94b      	cbnz	r3, 8003370 <__swsetup_r+0x7c>
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d003      	beq.n	8003370 <__swsetup_r+0x7c>
 8003368:	4621      	mov	r1, r4
 800336a:	4628      	mov	r0, r5
 800336c:	f000 fa60 	bl	8003830 <__smakebuf_r>
 8003370:	89a0      	ldrh	r0, [r4, #12]
 8003372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003376:	f010 0301 	ands.w	r3, r0, #1
 800337a:	d00a      	beq.n	8003392 <__swsetup_r+0x9e>
 800337c:	2300      	movs	r3, #0
 800337e:	60a3      	str	r3, [r4, #8]
 8003380:	6963      	ldr	r3, [r4, #20]
 8003382:	425b      	negs	r3, r3
 8003384:	61a3      	str	r3, [r4, #24]
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	b943      	cbnz	r3, 800339c <__swsetup_r+0xa8>
 800338a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800338e:	d1c4      	bne.n	800331a <__swsetup_r+0x26>
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	0781      	lsls	r1, r0, #30
 8003394:	bf58      	it	pl
 8003396:	6963      	ldrpl	r3, [r4, #20]
 8003398:	60a3      	str	r3, [r4, #8]
 800339a:	e7f4      	b.n	8003386 <__swsetup_r+0x92>
 800339c:	2000      	movs	r0, #0
 800339e:	e7f7      	b.n	8003390 <__swsetup_r+0x9c>
 80033a0:	20000064 	.word	0x20000064

080033a4 <memset>:
 80033a4:	4402      	add	r2, r0
 80033a6:	4603      	mov	r3, r0
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d100      	bne.n	80033ae <memset+0xa>
 80033ac:	4770      	bx	lr
 80033ae:	f803 1b01 	strb.w	r1, [r3], #1
 80033b2:	e7f9      	b.n	80033a8 <memset+0x4>

080033b4 <_close_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d06      	ldr	r5, [pc, #24]	; (80033d0 <_close_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	602b      	str	r3, [r5, #0]
 80033c0:	f7fd fafb 	bl	80009ba <_close>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_close_r+0x1a>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_close_r+0x1a>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000698 	.word	0x20000698

080033d4 <_lseek_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4d07      	ldr	r5, [pc, #28]	; (80033f4 <_lseek_r+0x20>)
 80033d8:	4604      	mov	r4, r0
 80033da:	4608      	mov	r0, r1
 80033dc:	4611      	mov	r1, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	602a      	str	r2, [r5, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7fd fb10 	bl	8000a08 <_lseek>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_lseek_r+0x1e>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_lseek_r+0x1e>
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	20000698 	.word	0x20000698

080033f8 <_read_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4d07      	ldr	r5, [pc, #28]	; (8003418 <_read_r+0x20>)
 80033fc:	4604      	mov	r4, r0
 80033fe:	4608      	mov	r0, r1
 8003400:	4611      	mov	r1, r2
 8003402:	2200      	movs	r2, #0
 8003404:	602a      	str	r2, [r5, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	f7fd fa9e 	bl	8000948 <_read>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d102      	bne.n	8003416 <_read_r+0x1e>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	b103      	cbz	r3, 8003416 <_read_r+0x1e>
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	20000698 	.word	0x20000698

0800341c <_write_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d07      	ldr	r5, [pc, #28]	; (800343c <_write_r+0x20>)
 8003420:	4604      	mov	r4, r0
 8003422:	4608      	mov	r0, r1
 8003424:	4611      	mov	r1, r2
 8003426:	2200      	movs	r2, #0
 8003428:	602a      	str	r2, [r5, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	f7fd faa9 	bl	8000982 <_write>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_write_r+0x1e>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_write_r+0x1e>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20000698 	.word	0x20000698

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000064 	.word	0x20000064

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4d0d      	ldr	r5, [pc, #52]	; (8003484 <__libc_init_array+0x38>)
 8003450:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	2600      	movs	r6, #0
 8003458:	42a6      	cmp	r6, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	4d0b      	ldr	r5, [pc, #44]	; (800348c <__libc_init_array+0x40>)
 800345e:	4c0c      	ldr	r4, [pc, #48]	; (8003490 <__libc_init_array+0x44>)
 8003460:	f000 fa54 	bl	800390c <_init>
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	2600      	movs	r6, #0
 800346a:	42a6      	cmp	r6, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f855 3b04 	ldr.w	r3, [r5], #4
 8003474:	4798      	blx	r3
 8003476:	3601      	adds	r6, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f855 3b04 	ldr.w	r3, [r5], #4
 800347e:	4798      	blx	r3
 8003480:	3601      	adds	r6, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	0800395c 	.word	0x0800395c
 8003488:	0800395c 	.word	0x0800395c
 800348c:	0800395c 	.word	0x0800395c
 8003490:	08003960 	.word	0x08003960

08003494 <__retarget_lock_acquire_recursive>:
 8003494:	4770      	bx	lr

08003496 <__retarget_lock_release_recursive>:
 8003496:	4770      	bx	lr

08003498 <_free_r>:
 8003498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800349a:	2900      	cmp	r1, #0
 800349c:	d044      	beq.n	8003528 <_free_r+0x90>
 800349e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a2:	9001      	str	r0, [sp, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f1a1 0404 	sub.w	r4, r1, #4
 80034aa:	bfb8      	it	lt
 80034ac:	18e4      	addlt	r4, r4, r3
 80034ae:	f000 f8df 	bl	8003670 <__malloc_lock>
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <_free_r+0x94>)
 80034b4:	9801      	ldr	r0, [sp, #4]
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	b933      	cbnz	r3, 80034c8 <_free_r+0x30>
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	6014      	str	r4, [r2, #0]
 80034be:	b003      	add	sp, #12
 80034c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034c4:	f000 b8da 	b.w	800367c <__malloc_unlock>
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d908      	bls.n	80034de <_free_r+0x46>
 80034cc:	6825      	ldr	r5, [r4, #0]
 80034ce:	1961      	adds	r1, r4, r5
 80034d0:	428b      	cmp	r3, r1
 80034d2:	bf01      	itttt	eq
 80034d4:	6819      	ldreq	r1, [r3, #0]
 80034d6:	685b      	ldreq	r3, [r3, #4]
 80034d8:	1949      	addeq	r1, r1, r5
 80034da:	6021      	streq	r1, [r4, #0]
 80034dc:	e7ed      	b.n	80034ba <_free_r+0x22>
 80034de:	461a      	mov	r2, r3
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b10b      	cbz	r3, 80034e8 <_free_r+0x50>
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	d9fa      	bls.n	80034de <_free_r+0x46>
 80034e8:	6811      	ldr	r1, [r2, #0]
 80034ea:	1855      	adds	r5, r2, r1
 80034ec:	42a5      	cmp	r5, r4
 80034ee:	d10b      	bne.n	8003508 <_free_r+0x70>
 80034f0:	6824      	ldr	r4, [r4, #0]
 80034f2:	4421      	add	r1, r4
 80034f4:	1854      	adds	r4, r2, r1
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	d1e0      	bne.n	80034be <_free_r+0x26>
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	6053      	str	r3, [r2, #4]
 8003502:	440c      	add	r4, r1
 8003504:	6014      	str	r4, [r2, #0]
 8003506:	e7da      	b.n	80034be <_free_r+0x26>
 8003508:	d902      	bls.n	8003510 <_free_r+0x78>
 800350a:	230c      	movs	r3, #12
 800350c:	6003      	str	r3, [r0, #0]
 800350e:	e7d6      	b.n	80034be <_free_r+0x26>
 8003510:	6825      	ldr	r5, [r4, #0]
 8003512:	1961      	adds	r1, r4, r5
 8003514:	428b      	cmp	r3, r1
 8003516:	bf04      	itt	eq
 8003518:	6819      	ldreq	r1, [r3, #0]
 800351a:	685b      	ldreq	r3, [r3, #4]
 800351c:	6063      	str	r3, [r4, #4]
 800351e:	bf04      	itt	eq
 8003520:	1949      	addeq	r1, r1, r5
 8003522:	6021      	streq	r1, [r4, #0]
 8003524:	6054      	str	r4, [r2, #4]
 8003526:	e7ca      	b.n	80034be <_free_r+0x26>
 8003528:	b003      	add	sp, #12
 800352a:	bd30      	pop	{r4, r5, pc}
 800352c:	200006a0 	.word	0x200006a0

08003530 <sbrk_aligned>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0e      	ldr	r6, [pc, #56]	; (800356c <sbrk_aligned+0x3c>)
 8003534:	460c      	mov	r4, r1
 8003536:	6831      	ldr	r1, [r6, #0]
 8003538:	4605      	mov	r5, r0
 800353a:	b911      	cbnz	r1, 8003542 <sbrk_aligned+0x12>
 800353c:	f000 f9d6 	bl	80038ec <_sbrk_r>
 8003540:	6030      	str	r0, [r6, #0]
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 f9d1 	bl	80038ec <_sbrk_r>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d00a      	beq.n	8003564 <sbrk_aligned+0x34>
 800354e:	1cc4      	adds	r4, r0, #3
 8003550:	f024 0403 	bic.w	r4, r4, #3
 8003554:	42a0      	cmp	r0, r4
 8003556:	d007      	beq.n	8003568 <sbrk_aligned+0x38>
 8003558:	1a21      	subs	r1, r4, r0
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f9c6 	bl	80038ec <_sbrk_r>
 8003560:	3001      	adds	r0, #1
 8003562:	d101      	bne.n	8003568 <sbrk_aligned+0x38>
 8003564:	f04f 34ff 	mov.w	r4, #4294967295
 8003568:	4620      	mov	r0, r4
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	200006a4 	.word	0x200006a4

08003570 <_malloc_r>:
 8003570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003574:	1ccd      	adds	r5, r1, #3
 8003576:	f025 0503 	bic.w	r5, r5, #3
 800357a:	3508      	adds	r5, #8
 800357c:	2d0c      	cmp	r5, #12
 800357e:	bf38      	it	cc
 8003580:	250c      	movcc	r5, #12
 8003582:	2d00      	cmp	r5, #0
 8003584:	4607      	mov	r7, r0
 8003586:	db01      	blt.n	800358c <_malloc_r+0x1c>
 8003588:	42a9      	cmp	r1, r5
 800358a:	d905      	bls.n	8003598 <_malloc_r+0x28>
 800358c:	230c      	movs	r3, #12
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	2600      	movs	r6, #0
 8003592:	4630      	mov	r0, r6
 8003594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003598:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800366c <_malloc_r+0xfc>
 800359c:	f000 f868 	bl	8003670 <__malloc_lock>
 80035a0:	f8d8 3000 	ldr.w	r3, [r8]
 80035a4:	461c      	mov	r4, r3
 80035a6:	bb5c      	cbnz	r4, 8003600 <_malloc_r+0x90>
 80035a8:	4629      	mov	r1, r5
 80035aa:	4638      	mov	r0, r7
 80035ac:	f7ff ffc0 	bl	8003530 <sbrk_aligned>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	4604      	mov	r4, r0
 80035b4:	d155      	bne.n	8003662 <_malloc_r+0xf2>
 80035b6:	f8d8 4000 	ldr.w	r4, [r8]
 80035ba:	4626      	mov	r6, r4
 80035bc:	2e00      	cmp	r6, #0
 80035be:	d145      	bne.n	800364c <_malloc_r+0xdc>
 80035c0:	2c00      	cmp	r4, #0
 80035c2:	d048      	beq.n	8003656 <_malloc_r+0xe6>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	4631      	mov	r1, r6
 80035c8:	4638      	mov	r0, r7
 80035ca:	eb04 0903 	add.w	r9, r4, r3
 80035ce:	f000 f98d 	bl	80038ec <_sbrk_r>
 80035d2:	4581      	cmp	r9, r0
 80035d4:	d13f      	bne.n	8003656 <_malloc_r+0xe6>
 80035d6:	6821      	ldr	r1, [r4, #0]
 80035d8:	1a6d      	subs	r5, r5, r1
 80035da:	4629      	mov	r1, r5
 80035dc:	4638      	mov	r0, r7
 80035de:	f7ff ffa7 	bl	8003530 <sbrk_aligned>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d037      	beq.n	8003656 <_malloc_r+0xe6>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	442b      	add	r3, r5
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	f8d8 3000 	ldr.w	r3, [r8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d038      	beq.n	8003666 <_malloc_r+0xf6>
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	42a2      	cmp	r2, r4
 80035f8:	d12b      	bne.n	8003652 <_malloc_r+0xe2>
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e00f      	b.n	8003620 <_malloc_r+0xb0>
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	1b52      	subs	r2, r2, r5
 8003604:	d41f      	bmi.n	8003646 <_malloc_r+0xd6>
 8003606:	2a0b      	cmp	r2, #11
 8003608:	d917      	bls.n	800363a <_malloc_r+0xca>
 800360a:	1961      	adds	r1, r4, r5
 800360c:	42a3      	cmp	r3, r4
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	bf18      	it	ne
 8003612:	6059      	strne	r1, [r3, #4]
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	bf08      	it	eq
 8003618:	f8c8 1000 	streq.w	r1, [r8]
 800361c:	5162      	str	r2, [r4, r5]
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	4638      	mov	r0, r7
 8003622:	f104 060b 	add.w	r6, r4, #11
 8003626:	f000 f829 	bl	800367c <__malloc_unlock>
 800362a:	f026 0607 	bic.w	r6, r6, #7
 800362e:	1d23      	adds	r3, r4, #4
 8003630:	1af2      	subs	r2, r6, r3
 8003632:	d0ae      	beq.n	8003592 <_malloc_r+0x22>
 8003634:	1b9b      	subs	r3, r3, r6
 8003636:	50a3      	str	r3, [r4, r2]
 8003638:	e7ab      	b.n	8003592 <_malloc_r+0x22>
 800363a:	42a3      	cmp	r3, r4
 800363c:	6862      	ldr	r2, [r4, #4]
 800363e:	d1dd      	bne.n	80035fc <_malloc_r+0x8c>
 8003640:	f8c8 2000 	str.w	r2, [r8]
 8003644:	e7ec      	b.n	8003620 <_malloc_r+0xb0>
 8003646:	4623      	mov	r3, r4
 8003648:	6864      	ldr	r4, [r4, #4]
 800364a:	e7ac      	b.n	80035a6 <_malloc_r+0x36>
 800364c:	4634      	mov	r4, r6
 800364e:	6876      	ldr	r6, [r6, #4]
 8003650:	e7b4      	b.n	80035bc <_malloc_r+0x4c>
 8003652:	4613      	mov	r3, r2
 8003654:	e7cc      	b.n	80035f0 <_malloc_r+0x80>
 8003656:	230c      	movs	r3, #12
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4638      	mov	r0, r7
 800365c:	f000 f80e 	bl	800367c <__malloc_unlock>
 8003660:	e797      	b.n	8003592 <_malloc_r+0x22>
 8003662:	6025      	str	r5, [r4, #0]
 8003664:	e7dc      	b.n	8003620 <_malloc_r+0xb0>
 8003666:	605b      	str	r3, [r3, #4]
 8003668:	deff      	udf	#255	; 0xff
 800366a:	bf00      	nop
 800366c:	200006a0 	.word	0x200006a0

08003670 <__malloc_lock>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__malloc_lock+0x8>)
 8003672:	f7ff bf0f 	b.w	8003494 <__retarget_lock_acquire_recursive>
 8003676:	bf00      	nop
 8003678:	2000069c 	.word	0x2000069c

0800367c <__malloc_unlock>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__malloc_unlock+0x8>)
 800367e:	f7ff bf0a 	b.w	8003496 <__retarget_lock_release_recursive>
 8003682:	bf00      	nop
 8003684:	2000069c 	.word	0x2000069c

08003688 <__sflush_r>:
 8003688:	898a      	ldrh	r2, [r1, #12]
 800368a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	4605      	mov	r5, r0
 8003690:	0710      	lsls	r0, r2, #28
 8003692:	460c      	mov	r4, r1
 8003694:	d458      	bmi.n	8003748 <__sflush_r+0xc0>
 8003696:	684b      	ldr	r3, [r1, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	dc05      	bgt.n	80036a8 <__sflush_r+0x20>
 800369c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dc02      	bgt.n	80036a8 <__sflush_r+0x20>
 80036a2:	2000      	movs	r0, #0
 80036a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	d0f9      	beq.n	80036a2 <__sflush_r+0x1a>
 80036ae:	2300      	movs	r3, #0
 80036b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036b4:	682f      	ldr	r7, [r5, #0]
 80036b6:	6a21      	ldr	r1, [r4, #32]
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	d032      	beq.n	8003722 <__sflush_r+0x9a>
 80036bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	075a      	lsls	r2, r3, #29
 80036c2:	d505      	bpl.n	80036d0 <__sflush_r+0x48>
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	1ac0      	subs	r0, r0, r3
 80036c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036ca:	b10b      	cbz	r3, 80036d0 <__sflush_r+0x48>
 80036cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ce:	1ac0      	subs	r0, r0, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	4602      	mov	r2, r0
 80036d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036d6:	6a21      	ldr	r1, [r4, #32]
 80036d8:	4628      	mov	r0, r5
 80036da:	47b0      	blx	r6
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	d106      	bne.n	80036f0 <__sflush_r+0x68>
 80036e2:	6829      	ldr	r1, [r5, #0]
 80036e4:	291d      	cmp	r1, #29
 80036e6:	d82b      	bhi.n	8003740 <__sflush_r+0xb8>
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <__sflush_r+0x108>)
 80036ea:	410a      	asrs	r2, r1
 80036ec:	07d6      	lsls	r6, r2, #31
 80036ee:	d427      	bmi.n	8003740 <__sflush_r+0xb8>
 80036f0:	2200      	movs	r2, #0
 80036f2:	6062      	str	r2, [r4, #4]
 80036f4:	04d9      	lsls	r1, r3, #19
 80036f6:	6922      	ldr	r2, [r4, #16]
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	d504      	bpl.n	8003706 <__sflush_r+0x7e>
 80036fc:	1c42      	adds	r2, r0, #1
 80036fe:	d101      	bne.n	8003704 <__sflush_r+0x7c>
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	b903      	cbnz	r3, 8003706 <__sflush_r+0x7e>
 8003704:	6560      	str	r0, [r4, #84]	; 0x54
 8003706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003708:	602f      	str	r7, [r5, #0]
 800370a:	2900      	cmp	r1, #0
 800370c:	d0c9      	beq.n	80036a2 <__sflush_r+0x1a>
 800370e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003712:	4299      	cmp	r1, r3
 8003714:	d002      	beq.n	800371c <__sflush_r+0x94>
 8003716:	4628      	mov	r0, r5
 8003718:	f7ff febe 	bl	8003498 <_free_r>
 800371c:	2000      	movs	r0, #0
 800371e:	6360      	str	r0, [r4, #52]	; 0x34
 8003720:	e7c0      	b.n	80036a4 <__sflush_r+0x1c>
 8003722:	2301      	movs	r3, #1
 8003724:	4628      	mov	r0, r5
 8003726:	47b0      	blx	r6
 8003728:	1c41      	adds	r1, r0, #1
 800372a:	d1c8      	bne.n	80036be <__sflush_r+0x36>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0c5      	beq.n	80036be <__sflush_r+0x36>
 8003732:	2b1d      	cmp	r3, #29
 8003734:	d001      	beq.n	800373a <__sflush_r+0xb2>
 8003736:	2b16      	cmp	r3, #22
 8003738:	d101      	bne.n	800373e <__sflush_r+0xb6>
 800373a:	602f      	str	r7, [r5, #0]
 800373c:	e7b1      	b.n	80036a2 <__sflush_r+0x1a>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003744:	81a3      	strh	r3, [r4, #12]
 8003746:	e7ad      	b.n	80036a4 <__sflush_r+0x1c>
 8003748:	690f      	ldr	r7, [r1, #16]
 800374a:	2f00      	cmp	r7, #0
 800374c:	d0a9      	beq.n	80036a2 <__sflush_r+0x1a>
 800374e:	0793      	lsls	r3, r2, #30
 8003750:	680e      	ldr	r6, [r1, #0]
 8003752:	bf08      	it	eq
 8003754:	694b      	ldreq	r3, [r1, #20]
 8003756:	600f      	str	r7, [r1, #0]
 8003758:	bf18      	it	ne
 800375a:	2300      	movne	r3, #0
 800375c:	eba6 0807 	sub.w	r8, r6, r7
 8003760:	608b      	str	r3, [r1, #8]
 8003762:	f1b8 0f00 	cmp.w	r8, #0
 8003766:	dd9c      	ble.n	80036a2 <__sflush_r+0x1a>
 8003768:	6a21      	ldr	r1, [r4, #32]
 800376a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800376c:	4643      	mov	r3, r8
 800376e:	463a      	mov	r2, r7
 8003770:	4628      	mov	r0, r5
 8003772:	47b0      	blx	r6
 8003774:	2800      	cmp	r0, #0
 8003776:	dc06      	bgt.n	8003786 <__sflush_r+0xfe>
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	e78e      	b.n	80036a4 <__sflush_r+0x1c>
 8003786:	4407      	add	r7, r0
 8003788:	eba8 0800 	sub.w	r8, r8, r0
 800378c:	e7e9      	b.n	8003762 <__sflush_r+0xda>
 800378e:	bf00      	nop
 8003790:	dfbffffe 	.word	0xdfbffffe

08003794 <_fflush_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	690b      	ldr	r3, [r1, #16]
 8003798:	4605      	mov	r5, r0
 800379a:	460c      	mov	r4, r1
 800379c:	b913      	cbnz	r3, 80037a4 <_fflush_r+0x10>
 800379e:	2500      	movs	r5, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	b118      	cbz	r0, 80037ae <_fflush_r+0x1a>
 80037a6:	6a03      	ldr	r3, [r0, #32]
 80037a8:	b90b      	cbnz	r3, 80037ae <_fflush_r+0x1a>
 80037aa:	f7ff fc91 	bl	80030d0 <__sinit>
 80037ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f3      	beq.n	800379e <_fflush_r+0xa>
 80037b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037b8:	07d0      	lsls	r0, r2, #31
 80037ba:	d404      	bmi.n	80037c6 <_fflush_r+0x32>
 80037bc:	0599      	lsls	r1, r3, #22
 80037be:	d402      	bmi.n	80037c6 <_fflush_r+0x32>
 80037c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037c2:	f7ff fe67 	bl	8003494 <__retarget_lock_acquire_recursive>
 80037c6:	4628      	mov	r0, r5
 80037c8:	4621      	mov	r1, r4
 80037ca:	f7ff ff5d 	bl	8003688 <__sflush_r>
 80037ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037d0:	07da      	lsls	r2, r3, #31
 80037d2:	4605      	mov	r5, r0
 80037d4:	d4e4      	bmi.n	80037a0 <_fflush_r+0xc>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	059b      	lsls	r3, r3, #22
 80037da:	d4e1      	bmi.n	80037a0 <_fflush_r+0xc>
 80037dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037de:	f7ff fe5a 	bl	8003496 <__retarget_lock_release_recursive>
 80037e2:	e7dd      	b.n	80037a0 <_fflush_r+0xc>

080037e4 <__swhatbuf_r>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	460c      	mov	r4, r1
 80037e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ec:	2900      	cmp	r1, #0
 80037ee:	b096      	sub	sp, #88	; 0x58
 80037f0:	4615      	mov	r5, r2
 80037f2:	461e      	mov	r6, r3
 80037f4:	da0d      	bge.n	8003812 <__swhatbuf_r+0x2e>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	bf0c      	ite	eq
 8003802:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003806:	2340      	movne	r3, #64	; 0x40
 8003808:	2000      	movs	r0, #0
 800380a:	6031      	str	r1, [r6, #0]
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	b016      	add	sp, #88	; 0x58
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	466a      	mov	r2, sp
 8003814:	f000 f848 	bl	80038a8 <_fstat_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	dbec      	blt.n	80037f6 <__swhatbuf_r+0x12>
 800381c:	9901      	ldr	r1, [sp, #4]
 800381e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003822:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003826:	4259      	negs	r1, r3
 8003828:	4159      	adcs	r1, r3
 800382a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382e:	e7eb      	b.n	8003808 <__swhatbuf_r+0x24>

08003830 <__smakebuf_r>:
 8003830:	898b      	ldrh	r3, [r1, #12]
 8003832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003834:	079d      	lsls	r5, r3, #30
 8003836:	4606      	mov	r6, r0
 8003838:	460c      	mov	r4, r1
 800383a:	d507      	bpl.n	800384c <__smakebuf_r+0x1c>
 800383c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	2301      	movs	r3, #1
 8003846:	6163      	str	r3, [r4, #20]
 8003848:	b002      	add	sp, #8
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	ab01      	add	r3, sp, #4
 800384e:	466a      	mov	r2, sp
 8003850:	f7ff ffc8 	bl	80037e4 <__swhatbuf_r>
 8003854:	9900      	ldr	r1, [sp, #0]
 8003856:	4605      	mov	r5, r0
 8003858:	4630      	mov	r0, r6
 800385a:	f7ff fe89 	bl	8003570 <_malloc_r>
 800385e:	b948      	cbnz	r0, 8003874 <__smakebuf_r+0x44>
 8003860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003864:	059a      	lsls	r2, r3, #22
 8003866:	d4ef      	bmi.n	8003848 <__smakebuf_r+0x18>
 8003868:	f023 0303 	bic.w	r3, r3, #3
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	81a3      	strh	r3, [r4, #12]
 8003872:	e7e3      	b.n	800383c <__smakebuf_r+0xc>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	6020      	str	r0, [r4, #0]
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	9b00      	ldr	r3, [sp, #0]
 8003880:	6163      	str	r3, [r4, #20]
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	6120      	str	r0, [r4, #16]
 8003886:	b15b      	cbz	r3, 80038a0 <__smakebuf_r+0x70>
 8003888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f81d 	bl	80038cc <_isatty_r>
 8003892:	b128      	cbz	r0, 80038a0 <__smakebuf_r+0x70>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	431d      	orrs	r5, r3
 80038a4:	81a5      	strh	r5, [r4, #12]
 80038a6:	e7cf      	b.n	8003848 <__smakebuf_r+0x18>

080038a8 <_fstat_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	; (80038c8 <_fstat_r+0x20>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f7fd f88c 	bl	80009d2 <_fstat>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d102      	bne.n	80038c4 <_fstat_r+0x1c>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	b103      	cbz	r3, 80038c4 <_fstat_r+0x1c>
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	20000698 	.word	0x20000698

080038cc <_isatty_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d06      	ldr	r5, [pc, #24]	; (80038e8 <_isatty_r+0x1c>)
 80038d0:	2300      	movs	r3, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fd f88b 	bl	80009f2 <_isatty>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_isatty_r+0x1a>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_isatty_r+0x1a>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000698 	.word	0x20000698

080038ec <_sbrk_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	; (8003908 <_sbrk_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd f894 	bl	8000a24 <_sbrk>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_sbrk_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_sbrk_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	20000698 	.word	0x20000698

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr


WS2812B_LED_DMA_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aac  08003aac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000690  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f8  200006f8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008e02  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a3e  00000000  00000000  00028edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0002a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006ed  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b4c  00000000  00000000  0002b92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b17f  00000000  00000000  0004d479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca4cc  00000000  00000000  000585f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b64  00000000  00000000  00122ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00125628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a64 	.word	0x08003a64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003a64 	.word	0x08003a64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Set_LED>:
  * @param  led number
  * @param  red degree
  * @param  green degree
  * @param blue degree
  */
void Set_LED (uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue){
 80004c4:	b490      	push	{r4, r7}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	4623      	mov	r3, r4
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	460b      	mov	r3, r1
 80004dc:	717b      	strb	r3, [r7, #5]
 80004de:	4613      	mov	r3, r2
 80004e0:	713b      	strb	r3, [r7, #4]
	LED_Data[LEDnum][0] = LEDnum;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	490d      	ldr	r1, [pc, #52]	; (800051c <Set_LED+0x58>)
 80004e6:	79fa      	ldrb	r2, [r7, #7]
 80004e8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <Set_LED+0x58>)
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4413      	add	r3, r2
 80004f4:	797a      	ldrb	r2, [r7, #5]
 80004f6:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <Set_LED+0x58>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <Set_LED+0x58>)
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	793a      	ldrb	r2, [r7, #4]
 800050e:	70da      	strb	r2, [r3, #3]
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bc90      	pop	{r4, r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	200004a8 	.word	0x200004a8

08000520 <WS2812_Send>:

/**
  * @brief  set the correct values for the red green blue colors according to the ws2812b datasheet and then sends daat through pwm pin
  */
void WS2812_Send (void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	e036      	b.n	800059e <WS2812_Send+0x7e>
	{

		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000530:	4a2e      	ldr	r2, [pc, #184]	; (80005ec <WS2812_Send+0xcc>)
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	041a      	lsls	r2, r3, #16
 800053c:	492b      	ldr	r1, [pc, #172]	; (80005ec <WS2812_Send+0xcc>)
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	431a      	orrs	r2, r3
 800054a:	4928      	ldr	r1, [pc, #160]	; (80005ec <WS2812_Send+0xcc>)
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	440b      	add	r3, r1
 8000552:	78db      	ldrb	r3, [r3, #3]
 8000554:	4313      	orrs	r3, r2
 8000556:	607b      	str	r3, [r7, #4]


		for (int i=23; i>=0; i--)
 8000558:	2317      	movs	r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e019      	b.n	8000592 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800055e:	2201      	movs	r2, #1
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <WS2812_Send+0xd0>)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	213c      	movs	r1, #60	; 0x3c
 8000576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057a:	e004      	b.n	8000586 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <WS2812_Send+0xd0>)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	211e      	movs	r1, #30
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3b01      	subs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dae2      	bge.n	800055e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	3301      	adds	r3, #1
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	2b13      	cmp	r3, #19
 80005a2:	ddc5      	ble.n	8000530 <WS2812_Send+0x10>
		}

	}
// 50us of 0s delay as required in datasheet
	for (int i=0; i<48; i++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	e00a      	b.n	80005c0 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <WS2812_Send+0xd0>)
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	2100      	movs	r1, #0
 80005b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
	for (int i=0; i<48; i++)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b2f      	cmp	r3, #47	; 0x2f
 80005c4:	ddf1      	ble.n	80005aa <WS2812_Send+0x8a>
	}
//start transmission to led strip
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <WS2812_Send+0xd0>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <WS2812_Send+0xd4>)
 80005d0:	f001 fef8 	bl	80023c4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80005d4:	bf00      	nop
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <WS2812_Send+0xd8>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0fb      	beq.n	80005d6 <WS2812_Send+0xb6>
	datasentflag = 0;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <WS2812_Send+0xd8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200004a8 	.word	0x200004a8
 80005f0:	20000084 	.word	0x20000084
 80005f4:	200004f8 	.word	0x200004f8
 80005f8:	200005a0 	.word	0x200005a0

080005fc <SysTick_Handler>:

#include "main.h"
#include "stm32f4xx_it.h"
extern DMA_HandleTypeDef hdma_tim1_ch1;
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  HAL_IncTick();// increment global tick
 8000600:	f000 fb80 	bl	8000d04 <HAL_IncTick>

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
// calling the IRQ handler
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <DMA2_Stream1_IRQHandler+0x10>)
 800060e:	f000 fe13 	bl	8001238 <HAL_DMA_IRQHandler>

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000540 	.word	0x20000540

0800061c <main>:
DMA_HandleTypeDef hdma_tim1_ch1;
uint8_t datasentflag=0;
void system_clock_config_HSI(uint8_t clock_freq);
static void TIM1_Init(void);
static void DMA_Init(void);
int main (){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

	HAL_Init();// HAL layer initialization
 8000622:	f000 fb1d 	bl	8000c60 <HAL_Init>

	system_clock_config_HSI(SYS_CLOCK_FREQ_72_MHZ);//configuring clock at 72MHZ
 8000626:	2002      	movs	r0, #2
 8000628:	f000 f882 	bl	8000730 <system_clock_config_HSI>

	DMA_Init(); //DMA initialization
 800062c:	f000 f93e 	bl	80008ac <DMA_Init>

	TIM1_Init(); //TIMER1 initialization
 8000630:	f000 f8fa 	bl	8000828 <TIM1_Init>


	while(1){//alternates between red green blue


	  for(int i=0;i<20;i++){
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e009      	b.n	800064e <main+0x32>
		   Set_LED(i, 0, 0, 0);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	2300      	movs	r3, #0
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	f7ff ff3e 	bl	80004c4 <Set_LED>
	  for(int i=0;i<20;i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b13      	cmp	r3, #19
 8000652:	ddf2      	ble.n	800063a <main+0x1e>
		  }
	   WS2812_Send();
 8000654:	f7ff ff64 	bl	8000520 <WS2812_Send>
	   HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fb72 	bl	8000d44 <HAL_Delay>
	   for(int i=0;i<20;i++){
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	e009      	b.n	800067a <main+0x5e>
		   Set_LED(i, 0,0, 255);
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	b2d8      	uxtb	r0, r3
 800066a:	23ff      	movs	r3, #255	; 0xff
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	f7ff ff28 	bl	80004c4 <Set_LED>
	   for(int i=0;i<20;i++){
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	3301      	adds	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	2b13      	cmp	r3, #19
 800067e:	ddf2      	ble.n	8000666 <main+0x4a>
		  }
	  WS2812_Send();
 8000680:	f7ff ff4e 	bl	8000520 <WS2812_Send>
	  HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f000 fb5c 	bl	8000d44 <HAL_Delay>
	  for(int i=0;i<20;i++){
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e009      	b.n	80006a6 <main+0x8a>
		   Set_LED(i, 0, 0, 0);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	b2d8      	uxtb	r0, r3
 8000696:	2300      	movs	r3, #0
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	f7ff ff12 	bl	80004c4 <Set_LED>
	  for(int i=0;i<20;i++){
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b13      	cmp	r3, #19
 80006aa:	ddf2      	ble.n	8000692 <main+0x76>
		  }

	   WS2812_Send();
 80006ac:	f7ff ff38 	bl	8000520 <WS2812_Send>
	   for(int i=0;i<20;i++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e009      	b.n	80006ca <main+0xae>
		   Set_LED(i, 255, 0, 0);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	2200      	movs	r2, #0
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	f7ff ff00 	bl	80004c4 <Set_LED>
	   for(int i=0;i<20;i++){
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b13      	cmp	r3, #19
 80006ce:	ddf2      	ble.n	80006b6 <main+0x9a>
		  }
	  WS2812_Send();
 80006d0:	f7ff ff26 	bl	8000520 <WS2812_Send>
	  HAL_Delay(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d8:	f000 fb34 	bl	8000d44 <HAL_Delay>
	  for(int i=0;i<20;i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	e009      	b.n	80006f6 <main+0xda>
		   Set_LED(i, 0, 0, 0);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	b2d8      	uxtb	r0, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	f7ff feea 	bl	80004c4 <Set_LED>
	  for(int i=0;i<20;i++){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3301      	adds	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b13      	cmp	r3, #19
 80006fa:	ddf2      	ble.n	80006e2 <main+0xc6>
		  }

	   WS2812_Send();
 80006fc:	f7ff ff10 	bl	8000520 <WS2812_Send>

	   for(int i=0;i<20;i++){
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	e009      	b.n	800071a <main+0xfe>
		   Set_LED(i, 0, 255,0);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	2300      	movs	r3, #0
 800070c:	22ff      	movs	r2, #255	; 0xff
 800070e:	2100      	movs	r1, #0
 8000710:	f7ff fed8 	bl	80004c4 <Set_LED>
	   for(int i=0;i<20;i++){
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2b13      	cmp	r3, #19
 800071e:	ddf2      	ble.n	8000706 <main+0xea>
		  }
		  WS2812_Send();
 8000720:	f7ff fefe 	bl	8000520 <WS2812_Send>
		  HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f000 fb0c 	bl	8000d44 <HAL_Delay>
	  for(int i=0;i<20;i++){
 800072c:	e782      	b.n	8000634 <main+0x18>
	...

08000730 <system_clock_config_HSI>:
}
/**
  * @brief  System clock Configuration using the HSI
  * @param  clock frequency needed for the System
  */
void system_clock_config_HSI(uint8_t clock_freq ){
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	  RCC_OscInitTypeDef osc_init = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 feda 	bl	80034fc <memset>
	  RCC_ClkInitTypeDef clk_init = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
	  uint32_t FLatency =0;
 8000758:	2300      	movs	r3, #0
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
	  osc_init.HSIState=RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
	  osc_init.HSICalibrationValue=RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
	  osc_init.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
	  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
	  switch (clock_freq){
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d002      	beq.n	800077c <system_clock_config_HSI+0x4c>
 8000776:	2b02      	cmp	r3, #2
 8000778:	d017      	beq.n	80007aa <system_clock_config_HSI+0x7a>
		  FLatency=FLASH_ACR_LATENCY_2WS;
		  break;

		}
	  default:
		  return;
 800077a:	e04f      	b.n	800081c <system_clock_config_HSI+0xec>
		  osc_init.PLL.PLLM=16;
 800077c:	2310      	movs	r3, #16
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=160;
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 8000784:	2302      	movs	r3, #2
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800078c:	230f      	movs	r3, #15
 800078e:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 80007a8:	e016      	b.n	80007d8 <system_clock_config_HSI+0xa8>
		  osc_init.PLL.PLLM=16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=144;
 80007ae:	2390      	movs	r3, #144	; 0x90
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 80007d6:	bf00      	nop
	  }
	 if( HAL_RCC_OscConfig(&osc_init)!= HAL_OK){
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f931 	bl	8001a44 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <system_clock_config_HSI+0xbc>
		 Error_Handler();
 80007e8:	f000 f894 	bl	8000914 <Error_Handler>
	 }
	 if( HAL_RCC_ClockConfig(&clk_init, FLatency)!= HAL_OK){
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fb9e 	bl	8001f34 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <system_clock_config_HSI+0xd2>
			 Error_Handler();
 80007fe:	f000 f889 	bl	8000914 <Error_Handler>
		 }

	 //Systick configuration
	 	 // for 1 ms for every systick interrupt
	 	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000802:	f001 fd83 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8000806:	4603      	mov	r3, r0
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <system_clock_config_HSI+0xf4>)
 800080a:	fba2 2303 	umull	r2, r3, r2, r3
 800080e:	099b      	lsrs	r3, r3, #6
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fbc0 	bl	8000f96 <HAL_SYSTICK_Config>
	 	// either hclck/8 or hclck so we decided hclk
	 	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000816:	2004      	movs	r0, #4
 8000818:	f000 fbca 	bl	8000fb0 <HAL_SYSTICK_CLKSourceConfig>


}
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	10624dd3 	.word	0x10624dd3

08000828 <TIM1_Init>:
/**
  * @brief timer initialization
  * generating an OUTPUT CHANNEL for the pwm signal with preiod of 90 to achieve 1.25us as req. for the led strip bit timing
  */
static void TIM1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]
  /**
    * Basic timer initialization
    */
  htim1.Instance = TIM1;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <TIM1_Init+0x7c>)
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <TIM1_Init+0x80>)
 8000844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <TIM1_Init+0x7c>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <TIM1_Init+0x7c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <TIM1_Init+0x7c>)
 8000854:	2259      	movs	r2, #89	; 0x59
 8000856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <TIM1_Init+0x7c>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <TIM1_Init+0x7c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <TIM1_Init+0x7c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <TIM1_Init+0x7c>)
 800086c:	f001 fd5a 	bl	8002324 <HAL_TIM_PWM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <TIM1_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f84d 	bl	8000914 <Error_Handler>
  }
  /**
    * output channel configurations
    */
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	2360      	movs	r3, #96	; 0x60
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <TIM1_Init+0x7c>)
 800088e:	f002 f833 	bl	80028f8 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <TIM1_Init+0x74>
  {
    Error_Handler();
 8000898:	f000 f83c 	bl	8000914 <Error_Handler>
  }



}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200004f8 	.word	0x200004f8
 80008a8:	40010000 	.word	0x40010000

080008ac <DMA_Init>:
/**
  * @brief Enable DMA controller clock
  */
static void DMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <DMA_Init+0x3c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <DMA_Init+0x3c>)
 80008bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <DMA_Init+0x3c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2039      	movs	r0, #57	; 0x39
 80008d4:	f000 fb35 	bl	8000f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008d8:	2039      	movs	r0, #57	; 0x39
 80008da:	f000 fb4e 	bl	8000f7a <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	/**
	  * stopping the dma to neglect the 5 extra bits the dma delivers
	  */
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80008f8:	f001 ff2c 	bl	8002754 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200004f8 	.word	0x200004f8
 8000910:	200005a0 	.word	0x200005a0

08000914 <Error_Handler>:

void Error_Handler(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	printf("error occured\n");
 8000918:	4801      	ldr	r0, [pc, #4]	; (8000920 <Error_Handler+0xc>)
 800091a:	f002 fd0f 	bl	800333c <puts>
	while(1);
 800091e:	e7fe      	b.n	800091e <Error_Handler+0xa>
 8000920:	08003a7c 	.word	0x08003a7c

08000924 <HAL_MspInit>:
 */
#include "main.h"
extern DMA_HandleTypeDef hdma_tim1_ch1;
//will do low level processor specific inits.
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_MspInit+0x7c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <HAL_MspInit+0x7c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_MspInit+0x7c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_MspInit+0x7c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_MspInit+0x7c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x7c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000962:	2003      	movs	r0, #3
 8000964:	f000 fae2 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x80>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_MspInit+0x80>)
 800096e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000972:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	f06f 000b 	mvn.w	r0, #11
 800097c:	f000 fae1 	bl	8000f42 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	f06f 000a 	mvn.w	r0, #10
 8000988:	f000 fadb 	bl	8000f42 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	f06f 0009 	mvn.w	r0, #9
 8000994:	f000 fad5 	bl	8000f42 <HAL_NVIC_SetPriority>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <HAL_TIM_PWM_MspInit>:
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a35      	ldr	r2, [pc, #212]	; (8000a8c <HAL_TIM_PWM_MspInit+0xe4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d164      	bne.n	8000a84 <HAL_TIM_PWM_MspInit+0xdc>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009d8:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <HAL_TIM_PWM_MspInit+0xf0>)
 80009da:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009de:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80009e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009e6:	2240      	movs	r2, #64	; 0x40
 80009e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 80009fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000a1a:	481e      	ldr	r0, [pc, #120]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a1c:	f000 fae4 	bl	8000fe8 <HAL_DMA_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000a26:	f7ff ff75 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_TIM_PWM_MspInit+0xec>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_TIM_PWM_MspInit+0xe8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <HAL_TIM_PWM_MspInit+0xf4>)
 8000a80:	f000 fe44 	bl	800170c <HAL_GPIO_Init>
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	20000540 	.word	0x20000540
 8000a98:	40026428 	.word	0x40026428
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00a      	b.n	8000ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab2:	f3af 8000 	nop.w
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60ba      	str	r2, [r7, #8]
 8000abe:	b2ca      	uxtb	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf0      	blt.n	8000ab2 <_read+0x12>
  }

  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e009      	b.n	8000b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf1      	blt.n	8000aec <_write+0x12>
  }
  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_close>:

int _close(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f002 fcf4 	bl	8003598 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	200005a4 	.word	0x200005a4
 8000be4:	200006f8 	.word	0x200006f8

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 fcb3 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fced 	bl	800061c <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c50:	08003ab4 	.word	0x08003ab4
  ldr r2, =_sbss
 8000c54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c58:	200006f8 	.word	0x200006f8

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f94f 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe46 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f967 	bl	8000f96 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f92f 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200005a8 	.word	0x200005a8

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200005a8 	.word	0x200005a8

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d106      	bne.n	8000fcc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000fca:	e005      	b.n	8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fd2:	f023 0304 	bic.w	r3, r3, #4
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fe9a 	bl	8000d2c <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e099      	b.n	8001138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2202      	movs	r2, #2
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001024:	e00f      	b.n	8001046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001026:	f7ff fe81 	bl	8000d2c <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b05      	cmp	r3, #5
 8001032:	d908      	bls.n	8001046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2220      	movs	r2, #32
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e078      	b.n	8001138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e8      	bne.n	8001026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HAL_DMA_Init+0x158>)
 8001060:	4013      	ands	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2b04      	cmp	r3, #4
 800109e:	d107      	bne.n	80010b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4313      	orrs	r3, r2
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f023 0307 	bic.w	r3, r3, #7
 80010c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d117      	bne.n	800110a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fa91 	bl	8001614 <DMA_CheckFifoParam>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001106:	2301      	movs	r3, #1
 8001108:	e016      	b.n	8001138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fa48 	bl	80015a8 <DMA_CalcBaseAndBitshift>
 8001118:	4603      	mov	r3, r0
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	f010803f 	.word	0xf010803f

08001144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_DMA_Start_IT+0x26>
 8001166:	2302      	movs	r3, #2
 8001168:	e040      	b.n	80011ec <HAL_DMA_Start_IT+0xa8>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d12f      	bne.n	80011de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2202      	movs	r2, #2
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f9da 	bl	800154c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	223f      	movs	r2, #63	; 0x3f
 800119e:	409a      	lsls	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0216 	orr.w	r2, r2, #22
 80011b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0208 	orr.w	r2, r2, #8
 80011ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e005      	b.n	80011ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011e6:	2302      	movs	r3, #2
 80011e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d004      	beq.n	8001212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00c      	b.n	800122c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001244:	4b8e      	ldr	r3, [pc, #568]	; (8001480 <HAL_DMA_IRQHandler+0x248>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8e      	ldr	r2, [pc, #568]	; (8001484 <HAL_DMA_IRQHandler+0x24c>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0a9b      	lsrs	r3, r3, #10
 8001250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	2208      	movs	r2, #8
 8001264:	409a      	lsls	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0204 	bic.w	r2, r2, #4
 800128a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2208      	movs	r2, #8
 8001292:	409a      	lsls	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2201      	movs	r2, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	2201      	movs	r2, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2204      	movs	r2, #4
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d012      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2204      	movs	r2, #4
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2210      	movs	r2, #16
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d043      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d03c      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2210      	movs	r2, #16
 8001334:	409a      	lsls	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d018      	beq.n	800137a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d024      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
 8001366:	e01f      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
 8001378:	e016      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	2220      	movs	r2, #32
 80013ae:	409a      	lsls	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 808f 	beq.w	80014d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8087 	beq.w	80014d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2220      	movs	r2, #32
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d136      	bne.n	8001450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0216 	bic.w	r2, r2, #22
 80013f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <HAL_DMA_IRQHandler+0x1da>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	2b00      	cmp	r3, #0
 8001444:	d07e      	beq.n	8001544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
        }
        return;
 800144e:	e079      	b.n	8001544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01d      	beq.n	800149a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10d      	bne.n	8001488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	2b00      	cmp	r3, #0
 8001472:	d031      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
 800147c:	e02c      	b.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
 8001498:	e01e      	b.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10f      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0210 	bic.w	r2, r2, #16
 80014b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d032      	beq.n	8001546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d022      	beq.n	8001532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2205      	movs	r2, #5
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	d307      	bcc.n	8001520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f2      	bne.n	8001504 <HAL_DMA_IRQHandler+0x2cc>
 800151e:	e000      	b.n	8001522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
 8001542:	e000      	b.n	8001546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001544:	bf00      	nop
    }
  }
}
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d108      	bne.n	800158c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800158a:	e007      	b.n	800159c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	60da      	str	r2, [r3, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b10      	subs	r3, #16
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <DMA_CalcBaseAndBitshift+0x64>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <DMA_CalcBaseAndBitshift+0x68>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d909      	bls.n	80015ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58
 80015e8:	e007      	b.n	80015fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	aaaaaaab 	.word	0xaaaaaaab
 8001610:	08003a9c 	.word	0x08003a9c

08001614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11f      	bne.n	800166e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d856      	bhi.n	80016e2 <DMA_CheckFifoParam+0xce>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <DMA_CheckFifoParam+0x28>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800165f 	.word	0x0800165f
 8001644:	0800164d 	.word	0x0800164d
 8001648:	080016e3 	.word	0x080016e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d046      	beq.n	80016e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e043      	b.n	80016e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001666:	d140      	bne.n	80016ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166c:	e03d      	b.n	80016ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001676:	d121      	bne.n	80016bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d837      	bhi.n	80016ee <DMA_CheckFifoParam+0xda>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <DMA_CheckFifoParam+0x70>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	08001695 	.word	0x08001695
 8001688:	0800169b 	.word	0x0800169b
 800168c:	08001695 	.word	0x08001695
 8001690:	080016ad 	.word	0x080016ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
      break;
 8001698:	e030      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d025      	beq.n	80016f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016aa:	e022      	b.n	80016f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b4:	d11f      	bne.n	80016f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ba:	e01c      	b.n	80016f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d903      	bls.n	80016ca <DMA_CheckFifoParam+0xb6>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d003      	beq.n	80016d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016c8:	e018      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
      break;
 80016ce:	e015      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      break;
 80016e0:	e00b      	b.n	80016fa <DMA_CheckFifoParam+0xe6>
      break;
 80016e2:	bf00      	nop
 80016e4:	e00a      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016e6:	bf00      	nop
 80016e8:	e008      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
 80016ec:	e006      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
 80016f0:	e004      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e002      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;   
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
    }
  } 
  
  return status; 
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e16b      	b.n	8001a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 815a 	bne.w	80019fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80b4 	beq.w	80019fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a5b      	ldr	r2, [pc, #364]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_GPIO_Init+0x314>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d02b      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_GPIO_Init+0x318>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x222>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a50      	ldr	r2, [pc, #320]	; (8001a28 <HAL_GPIO_Init+0x31c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x320>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x328>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x212>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x32c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_GPIO_Init+0x330>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x20a>
 8001912:	2307      	movs	r3, #7
 8001914:	e00e      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001916:	2308      	movs	r3, #8
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191a:	2306      	movs	r3, #6
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001932:	2300      	movs	r3, #0
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001944:	4935      	ldr	r1, [pc, #212]	; (8001a1c <HAL_GPIO_Init+0x310>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_GPIO_Init+0x334>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <HAL_GPIO_Init+0x334>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_GPIO_Init+0x334>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	f67f ae90 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e267      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d00c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d112      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b82      	ldr	r3, [pc, #520]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b7e      	ldr	r3, [pc, #504]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x108>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e242      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x74>
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6f      	ldr	r2, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6c      	ldr	r2, [pc, #432]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001adc:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a68      	ldr	r2, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a65      	ldr	r2, [pc, #404]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f916 	bl	8000d2c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f912 	bl	8000d2c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e207      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f902 	bl	8000d2c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f8fe 	bl	8000d2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1f3      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0xe8>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x152>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c7      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4937      	ldr	r1, [pc, #220]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff f8b7 	bl	8000d2c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f8b3 	bl	8000d2c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a8      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4925      	ldr	r1, [pc, #148]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x244>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f896 	bl	8000d2c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff f892 	bl	8000d2c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e187      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d036      	beq.n	8001c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x248>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f876 	bl	8000d2c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff f872 	bl	8000d2c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e167      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_OscConfig+0x240>)
 8001c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x200>
 8001c62:	e01b      	b.n	8001c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x248>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f85f 	bl	8000d2c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	e00e      	b.n	8001c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff f85b 	bl	8000d2c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d907      	bls.n	8001c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e150      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	42470000 	.word	0x42470000
 8001c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ea      	bne.n	8001c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8097 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a7c      	ldr	r2, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	4b74      	ldr	r3, [pc, #464]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a73      	ldr	r2, [pc, #460]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f81b 	bl	8000d2c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff f817 	bl	8000d2c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e10c      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x474>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
 8001d20:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a63      	ldr	r2, [pc, #396]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	e01c      	b.n	8001d68 <HAL_RCC_OscConfig+0x324>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x30c>
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5e      	ldr	r2, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a5b      	ldr	r2, [pc, #364]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x324>
 8001d50:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a54      	ldr	r2, [pc, #336]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe ffdc 	bl	8000d2c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe ffd8 	bl	8000d2c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0cb      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ee      	beq.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe ffc6 	bl	8000d2c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7fe ffc2 	bl	8000d2c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0b5      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a1 	beq.w	8001f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d05c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d141      	bne.n	8001e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff96 	bl	8000d2c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe ff92 	bl	8000d2c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e087      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff6b 	bl	8000d2c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ff67 	bl	8000d2c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e05c      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x416>
 8001e78:	e054      	b.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x478>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff54 	bl	8000d2c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe ff50 	bl	8000d2c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e045      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e038      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4ec>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d028      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d121      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0cc      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d90c      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d044      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e067      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4934      	ldr	r1, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7fe fe82 	bl	8000d2c <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fe7e 	bl	8000d2c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e04f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d20c      	bcs.n	800207c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e032      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ba:	f000 f821 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	5ccb      	ldrb	r3, [r1, r3]
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fde2 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08003a8c 	.word	0x08003a8c
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b094      	sub	sp, #80	; 0x50
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
 800210c:	2300      	movs	r3, #0
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002110:	2300      	movs	r3, #0
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002118:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00d      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x40>
 8002124:	2b08      	cmp	r3, #8
 8002126:	f200 80e1 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x34>
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x3a>
 8002132:	e0db      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_GetSysClockFreq+0x204>)
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002138:	e0db      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800213a:	4b73      	ldr	r3, [pc, #460]	; (8002308 <HAL_RCC_GetSysClockFreq+0x208>)
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213e:	e0d8      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d063      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	2200      	movs	r2, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
 800216e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002172:	4622      	mov	r2, r4
 8002174:	462b      	mov	r3, r5
 8002176:	f04f 0000 	mov.w	r0, #0
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	0159      	lsls	r1, r3, #5
 8002180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002184:	0150      	lsls	r0, r2, #5
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4621      	mov	r1, r4
 800218c:	1a51      	subs	r1, r2, r1
 800218e:	6139      	str	r1, [r7, #16]
 8002190:	4629      	mov	r1, r5
 8002192:	eb63 0301 	sbc.w	r3, r3, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021a4:	4659      	mov	r1, fp
 80021a6:	018b      	lsls	r3, r1, #6
 80021a8:	4651      	mov	r1, sl
 80021aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ae:	4651      	mov	r1, sl
 80021b0:	018a      	lsls	r2, r1, #6
 80021b2:	4651      	mov	r1, sl
 80021b4:	ebb2 0801 	subs.w	r8, r2, r1
 80021b8:	4659      	mov	r1, fp
 80021ba:	eb63 0901 	sbc.w	r9, r3, r1
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021d2:	4690      	mov	r8, r2
 80021d4:	4699      	mov	r9, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	eb18 0303 	adds.w	r3, r8, r3
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	462b      	mov	r3, r5
 80021e0:	eb49 0303 	adc.w	r3, r9, r3
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021f2:	4629      	mov	r1, r5
 80021f4:	024b      	lsls	r3, r1, #9
 80021f6:	4621      	mov	r1, r4
 80021f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021fc:	4621      	mov	r1, r4
 80021fe:	024a      	lsls	r2, r1, #9
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002206:	2200      	movs	r2, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
 800220a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800220c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002210:	f7fd ffda 	bl	80001c8 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800221c:	e058      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	2200      	movs	r2, #0
 8002226:	4618      	mov	r0, r3
 8002228:	4611      	mov	r1, r2
 800222a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002238:	4642      	mov	r2, r8
 800223a:	464b      	mov	r3, r9
 800223c:	f04f 0000 	mov.w	r0, #0
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	0159      	lsls	r1, r3, #5
 8002246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224a:	0150      	lsls	r0, r2, #5
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4641      	mov	r1, r8
 8002252:	ebb2 0a01 	subs.w	sl, r2, r1
 8002256:	4649      	mov	r1, r9
 8002258:	eb63 0b01 	sbc.w	fp, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800226c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002270:	ebb2 040a 	subs.w	r4, r2, sl
 8002274:	eb63 050b 	sbc.w	r5, r3, fp
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	00eb      	lsls	r3, r5, #3
 8002282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002286:	00e2      	lsls	r2, r4, #3
 8002288:	4614      	mov	r4, r2
 800228a:	461d      	mov	r5, r3
 800228c:	4643      	mov	r3, r8
 800228e:	18e3      	adds	r3, r4, r3
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	464b      	mov	r3, r9
 8002294:	eb45 0303 	adc.w	r3, r5, r3
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a6:	4629      	mov	r1, r5
 80022a8:	028b      	lsls	r3, r1, #10
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b0:	4621      	mov	r1, r4
 80022b2:	028a      	lsls	r2, r1, #10
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ba:	2200      	movs	r2, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	61fa      	str	r2, [r7, #28]
 80022c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c4:	f7fd ff80 	bl	80001c8 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3750      	adds	r7, #80	; 0x50
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000

08002324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fb2c 	bl	80009a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 fc70 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e022      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x72>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d109      	bne.n	800240a <HAL_TIM_PWM_Start_DMA+0x46>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e015      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x72>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start_DMA+0x60>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e008      	b.n	8002436 <HAL_TIM_PWM_Start_DMA+0x72>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	e171      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_TIM_PWM_Start_DMA+0x94>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e022      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0xda>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b04      	cmp	r3, #4
 800245c:	d109      	bne.n	8002472 <HAL_TIM_PWM_Start_DMA+0xae>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e015      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0xda>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d109      	bne.n	800248c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e008      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0xda>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d024      	beq.n	80024ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_PWM_Start_DMA+0xee>
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e137      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c0:	e016      	b.n	80024f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	e00e      	b.n	80024f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e0:	e006      	b.n	80024f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024ea:	e001      	b.n	80024f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e118      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	f200 80ae 	bhi.w	8002654 <HAL_TIM_PWM_Start_DMA+0x290>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002535 	.word	0x08002535
 8002504:	08002655 	.word	0x08002655
 8002508:	08002655 	.word	0x08002655
 800250c:	08002655 	.word	0x08002655
 8002510:	0800257d 	.word	0x0800257d
 8002514:	08002655 	.word	0x08002655
 8002518:	08002655 	.word	0x08002655
 800251c:	08002655 	.word	0x08002655
 8002520:	080025c5 	.word	0x080025c5
 8002524:	08002655 	.word	0x08002655
 8002528:	08002655 	.word	0x08002655
 800252c:	08002655 	.word	0x08002655
 8002530:	0800260d 	.word	0x0800260d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_TIM_PWM_Start_DMA+0x368>)
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	4a7b      	ldr	r2, [pc, #492]	; (8002730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_TIM_PWM_Start_DMA+0x370>)
 800254a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3334      	adds	r3, #52	; 0x34
 8002558:	461a      	mov	r2, r3
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	f7fe fdf2 	bl	8001144 <HAL_DMA_Start_IT>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0db      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002578:	60da      	str	r2, [r3, #12]
      break;
 800257a:	e06e      	b.n	800265a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	4a6a      	ldr	r2, [pc, #424]	; (800272c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	461a      	mov	r2, r3
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	f7fe fdce 	bl	8001144 <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0b7      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c0:	60da      	str	r2, [r3, #12]
      break;
 80025c2:	e04a      	b.n	800265a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_TIM_PWM_Start_DMA+0x368>)
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_TIM_PWM_Start_DMA+0x370>)
 80025da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	333c      	adds	r3, #60	; 0x3c
 80025e8:	461a      	mov	r2, r3
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	f7fe fdaa 	bl	8001144 <HAL_DMA_Start_IT>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e093      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002608:	60da      	str	r2, [r3, #12]
      break;
 800260a:	e026      	b.n	800265a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a46      	ldr	r2, [pc, #280]	; (800272c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002612:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4a45      	ldr	r2, [pc, #276]	; (8002730 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a44      	ldr	r2, [pc, #272]	; (8002734 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3340      	adds	r3, #64	; 0x40
 8002630:	461a      	mov	r2, r3
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	f7fe fd86 	bl	8001144 <HAL_DMA_Start_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06f      	b.n	8002722 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002650:	60da      	str	r2, [r3, #12]
      break;
 8002652:	e002      	b.n	800265a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
      break;
 8002658:	bf00      	nop
  }

  if (status == HAL_OK)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d15f      	bne.n	8002720 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fd3d 	bl	80030e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2f      	ldr	r2, [pc, #188]	; (800273c <HAL_TIM_PWM_Start_DMA+0x378>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_TIM_PWM_Start_DMA+0x374>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d022      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d01d      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d018      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_TIM_PWM_Start_DMA+0x380>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_TIM_PWM_Start_DMA+0x384>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00e      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	; (800273c <HAL_TIM_PWM_Start_DMA+0x378>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_TIM_PWM_Start_DMA+0x388>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x328>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d010      	beq.n	8002720 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	e007      	b.n	8002720 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08002b37 	.word	0x08002b37
 8002730:	08002bdf 	.word	0x08002bdf
 8002734:	08002aa5 	.word	0x08002aa5
 8002738:	40010000 	.word	0x40010000
 800273c:	40010400 	.word	0x40010400
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800
 8002748:	40000c00 	.word	0x40000c00
 800274c:	40014000 	.word	0x40014000
 8002750:	40001800 	.word	0x40001800

08002754 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d855      	bhi.n	8002814 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002768:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	080027a5 	.word	0x080027a5
 8002774:	08002815 	.word	0x08002815
 8002778:	08002815 	.word	0x08002815
 800277c:	08002815 	.word	0x08002815
 8002780:	080027c1 	.word	0x080027c1
 8002784:	08002815 	.word	0x08002815
 8002788:	08002815 	.word	0x08002815
 800278c:	08002815 	.word	0x08002815
 8002790:	080027dd 	.word	0x080027dd
 8002794:	08002815 	.word	0x08002815
 8002798:	08002815 	.word	0x08002815
 800279c:	08002815 	.word	0x08002815
 80027a0:	080027f9 	.word	0x080027f9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fd1b 	bl	80011f4 <HAL_DMA_Abort_IT>
      break;
 80027be:	e02c      	b.n	800281a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fd0d 	bl	80011f4 <HAL_DMA_Abort_IT>
      break;
 80027da:	e01e      	b.n	800281a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fcff 	bl	80011f4 <HAL_DMA_Abort_IT>
      break;
 80027f6:	e010      	b.n	800281a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002806:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fcf1 	bl	80011f4 <HAL_DMA_Abort_IT>
      break;
 8002812:	e002      	b.n	800281a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	bf00      	nop
  }

  if (status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d161      	bne.n	80028e4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fc5d 	bl	80030e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	f241 1311 	movw	r3, #4369	; 0x1111
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_TIM_PWM_Stop_DMA+0x128>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	f240 4344 	movw	r3, #1092	; 0x444
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_TIM_PWM_Stop_DMA+0x128>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	f241 1311 	movw	r3, #4369	; 0x1111
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_TIM_PWM_Stop_DMA+0x158>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	f240 4344 	movw	r3, #1092	; 0x444
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_TIM_PWM_Stop_DMA+0x158>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_TIM_PWM_Stop_DMA+0x168>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ba:	e013      	b.n	80028e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d104      	bne.n	80028cc <HAL_TIM_PWM_Stop_DMA+0x178>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ca:	e00b      	b.n	80028e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d104      	bne.n	80028dc <HAL_TIM_PWM_Stop_DMA+0x188>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028da:	e003      	b.n	80028e4 <HAL_TIM_PWM_Stop_DMA+0x190>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002912:	2302      	movs	r3, #2
 8002914:	e0ae      	b.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	f200 809f 	bhi.w	8002a64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002961 	.word	0x08002961
 8002930:	08002a65 	.word	0x08002a65
 8002934:	08002a65 	.word	0x08002a65
 8002938:	08002a65 	.word	0x08002a65
 800293c:	080029a1 	.word	0x080029a1
 8002940:	08002a65 	.word	0x08002a65
 8002944:	08002a65 	.word	0x08002a65
 8002948:	08002a65 	.word	0x08002a65
 800294c:	080029e3 	.word	0x080029e3
 8002950:	08002a65 	.word	0x08002a65
 8002954:	08002a65 	.word	0x08002a65
 8002958:	08002a65 	.word	0x08002a65
 800295c:	08002a23 	.word	0x08002a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fa0e 	bl	8002d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0208 	orr.w	r2, r2, #8
 800297a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6999      	ldr	r1, [r3, #24]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
      break;
 800299e:	e064      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fa5e 	bl	8002e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	021a      	lsls	r2, r3, #8
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
      break;
 80029e0:	e043      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fab3 	bl	8002f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0208 	orr.w	r2, r2, #8
 80029fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0204 	bic.w	r2, r2, #4
 8002a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69d9      	ldr	r1, [r3, #28]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	61da      	str	r2, [r3, #28]
      break;
 8002a20:	e023      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fb07 	bl	800303c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	61da      	str	r2, [r3, #28]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aca:	e02a      	b.n	8002b22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d107      	bne.n	8002ae6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	e01d      	b.n	8002b22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2204      	movs	r2, #4
 8002af4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afe:	e010      	b.n	8002b22 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d107      	bne.n	8002b1a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b18:	e003      	b.n	8002b22 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ffb4 	bl	8002a90 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	771a      	strb	r2, [r3, #28]
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10b      	bne.n	8002b66 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d136      	bne.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b64:	e031      	b.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d10b      	bne.n	8002b88 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2202      	movs	r2, #2
 8002b74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d125      	bne.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b86:	e020      	b.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10b      	bne.n	8002baa <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2204      	movs	r2, #4
 8002b96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d114      	bne.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba8:	e00f      	b.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10a      	bne.n	8002bca <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7fd fe8e 	bl	80008ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	771a      	strb	r2, [r3, #28]
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d103      	bne.n	8002bfe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	771a      	strb	r2, [r3, #28]
 8002bfc:	e019      	b.n	8002c32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d103      	bne.n	8002c10 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	771a      	strb	r2, [r3, #28]
 8002c0e:	e010      	b.n	8002c32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d103      	bne.n	8002c22 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
 8002c20:	e007      	b.n	8002c32 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d102      	bne.n	8002c32 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2208      	movs	r2, #8
 8002c30:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff ff22 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d027      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d023      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <TIM_Base_SetConfig+0x128>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <TIM_Base_SetConfig+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <TIM_Base_SetConfig+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800
 8002d7c:	40001800 	.word	0x40001800
 8002d80:	40001c00 	.word	0x40001c00
 8002d84:	40002000 	.word	0x40002000

08002d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <TIM_OC1_SetConfig+0xd8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_OC1_SetConfig+0x64>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <TIM_OC1_SetConfig+0xdc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d10c      	bne.n	8002e06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0308 	bic.w	r3, r3, #8
 8002df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <TIM_OC1_SetConfig+0xd8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_OC1_SetConfig+0x8e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC1_SetConfig+0xdc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d111      	bne.n	8002e3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40010400 	.word	0x40010400

08002e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0210 	bic.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0320 	bic.w	r3, r3, #32
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <TIM_OC2_SetConfig+0xe4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_OC2_SetConfig+0x68>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <TIM_OC2_SetConfig+0xe8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10d      	bne.n	8002eec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <TIM_OC2_SetConfig+0xe4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_OC2_SetConfig+0x94>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <TIM_OC2_SetConfig+0xe8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d113      	bne.n	8002f24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40010400 	.word	0x40010400

08002f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a21      	ldr	r2, [pc, #132]	; (8003034 <TIM_OC3_SetConfig+0xe0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_OC3_SetConfig+0x66>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <TIM_OC3_SetConfig+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10d      	bne.n	8002fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	; (8003034 <TIM_OC3_SetConfig+0xe0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_OC3_SetConfig+0x92>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <TIM_OC3_SetConfig+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d113      	bne.n	800300e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40010000 	.word	0x40010000
 8003038:	40010400 	.word	0x40010400

0800303c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	031b      	lsls	r3, r3, #12
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <TIM_OC4_SetConfig+0xa4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC4_SetConfig+0x68>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <TIM_OC4_SetConfig+0xa8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d109      	bne.n	80030b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40010400 	.word	0x40010400

080030e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2201      	movs	r2, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <std>:
 8003134:	2300      	movs	r3, #0
 8003136:	b510      	push	{r4, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	e9c0 3300 	strd	r3, r3, [r0]
 800313e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003142:	6083      	str	r3, [r0, #8]
 8003144:	8181      	strh	r1, [r0, #12]
 8003146:	6643      	str	r3, [r0, #100]	; 0x64
 8003148:	81c2      	strh	r2, [r0, #14]
 800314a:	6183      	str	r3, [r0, #24]
 800314c:	4619      	mov	r1, r3
 800314e:	2208      	movs	r2, #8
 8003150:	305c      	adds	r0, #92	; 0x5c
 8003152:	f000 f9d3 	bl	80034fc <memset>
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <std+0x38>)
 8003158:	6263      	str	r3, [r4, #36]	; 0x24
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <std+0x3c>)
 800315c:	62a3      	str	r3, [r4, #40]	; 0x28
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <std+0x40>)
 8003160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <std+0x44>)
 8003164:	6224      	str	r4, [r4, #32]
 8003166:	6323      	str	r3, [r4, #48]	; 0x30
 8003168:	bd10      	pop	{r4, pc}
 800316a:	bf00      	nop
 800316c:	0800334d 	.word	0x0800334d
 8003170:	0800336f 	.word	0x0800336f
 8003174:	080033a7 	.word	0x080033a7
 8003178:	080033cb 	.word	0x080033cb

0800317c <stdio_exit_handler>:
 800317c:	4a02      	ldr	r2, [pc, #8]	; (8003188 <stdio_exit_handler+0xc>)
 800317e:	4903      	ldr	r1, [pc, #12]	; (800318c <stdio_exit_handler+0x10>)
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <stdio_exit_handler+0x14>)
 8003182:	f000 b869 	b.w	8003258 <_fwalk_sglue>
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c
 800318c:	080038ed 	.word	0x080038ed
 8003190:	20000018 	.word	0x20000018

08003194 <cleanup_stdio>:
 8003194:	6841      	ldr	r1, [r0, #4]
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <cleanup_stdio+0x34>)
 8003198:	4299      	cmp	r1, r3
 800319a:	b510      	push	{r4, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	d001      	beq.n	80031a4 <cleanup_stdio+0x10>
 80031a0:	f000 fba4 	bl	80038ec <_fflush_r>
 80031a4:	68a1      	ldr	r1, [r4, #8]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <cleanup_stdio+0x38>)
 80031a8:	4299      	cmp	r1, r3
 80031aa:	d002      	beq.n	80031b2 <cleanup_stdio+0x1e>
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fb9d 	bl	80038ec <_fflush_r>
 80031b2:	68e1      	ldr	r1, [r4, #12]
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <cleanup_stdio+0x3c>)
 80031b6:	4299      	cmp	r1, r3
 80031b8:	d004      	beq.n	80031c4 <cleanup_stdio+0x30>
 80031ba:	4620      	mov	r0, r4
 80031bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c0:	f000 bb94 	b.w	80038ec <_fflush_r>
 80031c4:	bd10      	pop	{r4, pc}
 80031c6:	bf00      	nop
 80031c8:	200005ac 	.word	0x200005ac
 80031cc:	20000614 	.word	0x20000614
 80031d0:	2000067c 	.word	0x2000067c

080031d4 <global_stdio_init.part.0>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <global_stdio_init.part.0+0x30>)
 80031d8:	4c0b      	ldr	r4, [pc, #44]	; (8003208 <global_stdio_init.part.0+0x34>)
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <global_stdio_init.part.0+0x38>)
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4620      	mov	r0, r4
 80031e0:	2200      	movs	r2, #0
 80031e2:	2104      	movs	r1, #4
 80031e4:	f7ff ffa6 	bl	8003134 <std>
 80031e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031ec:	2201      	movs	r2, #1
 80031ee:	2109      	movs	r1, #9
 80031f0:	f7ff ffa0 	bl	8003134 <std>
 80031f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031f8:	2202      	movs	r2, #2
 80031fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fe:	2112      	movs	r1, #18
 8003200:	f7ff bf98 	b.w	8003134 <std>
 8003204:	200006e4 	.word	0x200006e4
 8003208:	200005ac 	.word	0x200005ac
 800320c:	0800317d 	.word	0x0800317d

08003210 <__sfp_lock_acquire>:
 8003210:	4801      	ldr	r0, [pc, #4]	; (8003218 <__sfp_lock_acquire+0x8>)
 8003212:	f000 b9eb 	b.w	80035ec <__retarget_lock_acquire_recursive>
 8003216:	bf00      	nop
 8003218:	200006ed 	.word	0x200006ed

0800321c <__sfp_lock_release>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__sfp_lock_release+0x8>)
 800321e:	f000 b9e6 	b.w	80035ee <__retarget_lock_release_recursive>
 8003222:	bf00      	nop
 8003224:	200006ed 	.word	0x200006ed

08003228 <__sinit>:
 8003228:	b510      	push	{r4, lr}
 800322a:	4604      	mov	r4, r0
 800322c:	f7ff fff0 	bl	8003210 <__sfp_lock_acquire>
 8003230:	6a23      	ldr	r3, [r4, #32]
 8003232:	b11b      	cbz	r3, 800323c <__sinit+0x14>
 8003234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003238:	f7ff bff0 	b.w	800321c <__sfp_lock_release>
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <__sinit+0x28>)
 800323e:	6223      	str	r3, [r4, #32]
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <__sinit+0x2c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f5      	bne.n	8003234 <__sinit+0xc>
 8003248:	f7ff ffc4 	bl	80031d4 <global_stdio_init.part.0>
 800324c:	e7f2      	b.n	8003234 <__sinit+0xc>
 800324e:	bf00      	nop
 8003250:	08003195 	.word	0x08003195
 8003254:	200006e4 	.word	0x200006e4

08003258 <_fwalk_sglue>:
 8003258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800325c:	4607      	mov	r7, r0
 800325e:	4688      	mov	r8, r1
 8003260:	4614      	mov	r4, r2
 8003262:	2600      	movs	r6, #0
 8003264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003268:	f1b9 0901 	subs.w	r9, r9, #1
 800326c:	d505      	bpl.n	800327a <_fwalk_sglue+0x22>
 800326e:	6824      	ldr	r4, [r4, #0]
 8003270:	2c00      	cmp	r4, #0
 8003272:	d1f7      	bne.n	8003264 <_fwalk_sglue+0xc>
 8003274:	4630      	mov	r0, r6
 8003276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800327a:	89ab      	ldrh	r3, [r5, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d907      	bls.n	8003290 <_fwalk_sglue+0x38>
 8003280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003284:	3301      	adds	r3, #1
 8003286:	d003      	beq.n	8003290 <_fwalk_sglue+0x38>
 8003288:	4629      	mov	r1, r5
 800328a:	4638      	mov	r0, r7
 800328c:	47c0      	blx	r8
 800328e:	4306      	orrs	r6, r0
 8003290:	3568      	adds	r5, #104	; 0x68
 8003292:	e7e9      	b.n	8003268 <_fwalk_sglue+0x10>

08003294 <_puts_r>:
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	6884      	ldr	r4, [r0, #8]
 800329a:	4605      	mov	r5, r0
 800329c:	460e      	mov	r6, r1
 800329e:	b90b      	cbnz	r3, 80032a4 <_puts_r+0x10>
 80032a0:	f7ff ffc2 	bl	8003228 <__sinit>
 80032a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a6:	07db      	lsls	r3, r3, #31
 80032a8:	d405      	bmi.n	80032b6 <_puts_r+0x22>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	0598      	lsls	r0, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_puts_r+0x22>
 80032b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b2:	f000 f99b 	bl	80035ec <__retarget_lock_acquire_recursive>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	0719      	lsls	r1, r3, #28
 80032ba:	d513      	bpl.n	80032e4 <_puts_r+0x50>
 80032bc:	6923      	ldr	r3, [r4, #16]
 80032be:	b18b      	cbz	r3, 80032e4 <_puts_r+0x50>
 80032c0:	3e01      	subs	r6, #1
 80032c2:	68a3      	ldr	r3, [r4, #8]
 80032c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60a3      	str	r3, [r4, #8]
 80032cc:	b9e9      	cbnz	r1, 800330a <_puts_r+0x76>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	da2e      	bge.n	8003330 <_puts_r+0x9c>
 80032d2:	4622      	mov	r2, r4
 80032d4:	210a      	movs	r1, #10
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f87b 	bl	80033d2 <__swbuf_r>
 80032dc:	3001      	adds	r0, #1
 80032de:	d007      	beq.n	80032f0 <_puts_r+0x5c>
 80032e0:	250a      	movs	r5, #10
 80032e2:	e007      	b.n	80032f4 <_puts_r+0x60>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 f8b0 	bl	800344c <__swsetup_r>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d0e7      	beq.n	80032c0 <_puts_r+0x2c>
 80032f0:	f04f 35ff 	mov.w	r5, #4294967295
 80032f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f6:	07da      	lsls	r2, r3, #31
 80032f8:	d405      	bmi.n	8003306 <_puts_r+0x72>
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	059b      	lsls	r3, r3, #22
 80032fe:	d402      	bmi.n	8003306 <_puts_r+0x72>
 8003300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003302:	f000 f974 	bl	80035ee <__retarget_lock_release_recursive>
 8003306:	4628      	mov	r0, r5
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	2b00      	cmp	r3, #0
 800330c:	da04      	bge.n	8003318 <_puts_r+0x84>
 800330e:	69a2      	ldr	r2, [r4, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	dc06      	bgt.n	8003322 <_puts_r+0x8e>
 8003314:	290a      	cmp	r1, #10
 8003316:	d004      	beq.n	8003322 <_puts_r+0x8e>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	6022      	str	r2, [r4, #0]
 800331e:	7019      	strb	r1, [r3, #0]
 8003320:	e7cf      	b.n	80032c2 <_puts_r+0x2e>
 8003322:	4622      	mov	r2, r4
 8003324:	4628      	mov	r0, r5
 8003326:	f000 f854 	bl	80033d2 <__swbuf_r>
 800332a:	3001      	adds	r0, #1
 800332c:	d1c9      	bne.n	80032c2 <_puts_r+0x2e>
 800332e:	e7df      	b.n	80032f0 <_puts_r+0x5c>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	250a      	movs	r5, #10
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	701d      	strb	r5, [r3, #0]
 800333a:	e7db      	b.n	80032f4 <_puts_r+0x60>

0800333c <puts>:
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <puts+0xc>)
 800333e:	4601      	mov	r1, r0
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	f7ff bfa7 	b.w	8003294 <_puts_r>
 8003346:	bf00      	nop
 8003348:	20000064 	.word	0x20000064

0800334c <__sread>:
 800334c:	b510      	push	{r4, lr}
 800334e:	460c      	mov	r4, r1
 8003350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003354:	f000 f8fc 	bl	8003550 <_read_r>
 8003358:	2800      	cmp	r0, #0
 800335a:	bfab      	itete	ge
 800335c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800335e:	89a3      	ldrhlt	r3, [r4, #12]
 8003360:	181b      	addge	r3, r3, r0
 8003362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003366:	bfac      	ite	ge
 8003368:	6563      	strge	r3, [r4, #84]	; 0x54
 800336a:	81a3      	strhlt	r3, [r4, #12]
 800336c:	bd10      	pop	{r4, pc}

0800336e <__swrite>:
 800336e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003372:	461f      	mov	r7, r3
 8003374:	898b      	ldrh	r3, [r1, #12]
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	4605      	mov	r5, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4616      	mov	r6, r2
 800337e:	d505      	bpl.n	800338c <__swrite+0x1e>
 8003380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003384:	2302      	movs	r3, #2
 8003386:	2200      	movs	r2, #0
 8003388:	f000 f8d0 	bl	800352c <_lseek_r>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003396:	81a3      	strh	r3, [r4, #12]
 8003398:	4632      	mov	r2, r6
 800339a:	463b      	mov	r3, r7
 800339c:	4628      	mov	r0, r5
 800339e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033a2:	f000 b8e7 	b.w	8003574 <_write_r>

080033a6 <__sseek>:
 80033a6:	b510      	push	{r4, lr}
 80033a8:	460c      	mov	r4, r1
 80033aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ae:	f000 f8bd 	bl	800352c <_lseek_r>
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	bf15      	itete	ne
 80033b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80033ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033c2:	81a3      	strheq	r3, [r4, #12]
 80033c4:	bf18      	it	ne
 80033c6:	81a3      	strhne	r3, [r4, #12]
 80033c8:	bd10      	pop	{r4, pc}

080033ca <__sclose>:
 80033ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ce:	f000 b89d 	b.w	800350c <_close_r>

080033d2 <__swbuf_r>:
 80033d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d4:	460e      	mov	r6, r1
 80033d6:	4614      	mov	r4, r2
 80033d8:	4605      	mov	r5, r0
 80033da:	b118      	cbz	r0, 80033e4 <__swbuf_r+0x12>
 80033dc:	6a03      	ldr	r3, [r0, #32]
 80033de:	b90b      	cbnz	r3, 80033e4 <__swbuf_r+0x12>
 80033e0:	f7ff ff22 	bl	8003228 <__sinit>
 80033e4:	69a3      	ldr	r3, [r4, #24]
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	071a      	lsls	r2, r3, #28
 80033ec:	d525      	bpl.n	800343a <__swbuf_r+0x68>
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	b31b      	cbz	r3, 800343a <__swbuf_r+0x68>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	6922      	ldr	r2, [r4, #16]
 80033f6:	1a98      	subs	r0, r3, r2
 80033f8:	6963      	ldr	r3, [r4, #20]
 80033fa:	b2f6      	uxtb	r6, r6
 80033fc:	4283      	cmp	r3, r0
 80033fe:	4637      	mov	r7, r6
 8003400:	dc04      	bgt.n	800340c <__swbuf_r+0x3a>
 8003402:	4621      	mov	r1, r4
 8003404:	4628      	mov	r0, r5
 8003406:	f000 fa71 	bl	80038ec <_fflush_r>
 800340a:	b9e0      	cbnz	r0, 8003446 <__swbuf_r+0x74>
 800340c:	68a3      	ldr	r3, [r4, #8]
 800340e:	3b01      	subs	r3, #1
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	6022      	str	r2, [r4, #0]
 8003418:	701e      	strb	r6, [r3, #0]
 800341a:	6962      	ldr	r2, [r4, #20]
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	429a      	cmp	r2, r3
 8003420:	d004      	beq.n	800342c <__swbuf_r+0x5a>
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d506      	bpl.n	8003436 <__swbuf_r+0x64>
 8003428:	2e0a      	cmp	r6, #10
 800342a:	d104      	bne.n	8003436 <__swbuf_r+0x64>
 800342c:	4621      	mov	r1, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 fa5c 	bl	80038ec <_fflush_r>
 8003434:	b938      	cbnz	r0, 8003446 <__swbuf_r+0x74>
 8003436:	4638      	mov	r0, r7
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f805 	bl	800344c <__swsetup_r>
 8003442:	2800      	cmp	r0, #0
 8003444:	d0d5      	beq.n	80033f2 <__swbuf_r+0x20>
 8003446:	f04f 37ff 	mov.w	r7, #4294967295
 800344a:	e7f4      	b.n	8003436 <__swbuf_r+0x64>

0800344c <__swsetup_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <__swsetup_r+0xac>)
 8003450:	4605      	mov	r5, r0
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	460c      	mov	r4, r1
 8003456:	b118      	cbz	r0, 8003460 <__swsetup_r+0x14>
 8003458:	6a03      	ldr	r3, [r0, #32]
 800345a:	b90b      	cbnz	r3, 8003460 <__swsetup_r+0x14>
 800345c:	f7ff fee4 	bl	8003228 <__sinit>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003466:	0718      	lsls	r0, r3, #28
 8003468:	d422      	bmi.n	80034b0 <__swsetup_r+0x64>
 800346a:	06d9      	lsls	r1, r3, #27
 800346c:	d407      	bmi.n	800347e <__swsetup_r+0x32>
 800346e:	2309      	movs	r3, #9
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	e034      	b.n	80034e8 <__swsetup_r+0x9c>
 800347e:	0758      	lsls	r0, r3, #29
 8003480:	d512      	bpl.n	80034a8 <__swsetup_r+0x5c>
 8003482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003484:	b141      	cbz	r1, 8003498 <__swsetup_r+0x4c>
 8003486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800348a:	4299      	cmp	r1, r3
 800348c:	d002      	beq.n	8003494 <__swsetup_r+0x48>
 800348e:	4628      	mov	r0, r5
 8003490:	f000 f8ae 	bl	80035f0 <_free_r>
 8003494:	2300      	movs	r3, #0
 8003496:	6363      	str	r3, [r4, #52]	; 0x34
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800349e:	81a3      	strh	r3, [r4, #12]
 80034a0:	2300      	movs	r3, #0
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f043 0308 	orr.w	r3, r3, #8
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	b94b      	cbnz	r3, 80034c8 <__swsetup_r+0x7c>
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d003      	beq.n	80034c8 <__swsetup_r+0x7c>
 80034c0:	4621      	mov	r1, r4
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fa60 	bl	8003988 <__smakebuf_r>
 80034c8:	89a0      	ldrh	r0, [r4, #12]
 80034ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ce:	f010 0301 	ands.w	r3, r0, #1
 80034d2:	d00a      	beq.n	80034ea <__swsetup_r+0x9e>
 80034d4:	2300      	movs	r3, #0
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	6963      	ldr	r3, [r4, #20]
 80034da:	425b      	negs	r3, r3
 80034dc:	61a3      	str	r3, [r4, #24]
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	b943      	cbnz	r3, 80034f4 <__swsetup_r+0xa8>
 80034e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034e6:	d1c4      	bne.n	8003472 <__swsetup_r+0x26>
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	0781      	lsls	r1, r0, #30
 80034ec:	bf58      	it	pl
 80034ee:	6963      	ldrpl	r3, [r4, #20]
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	e7f4      	b.n	80034de <__swsetup_r+0x92>
 80034f4:	2000      	movs	r0, #0
 80034f6:	e7f7      	b.n	80034e8 <__swsetup_r+0x9c>
 80034f8:	20000064 	.word	0x20000064

080034fc <memset>:
 80034fc:	4402      	add	r2, r0
 80034fe:	4603      	mov	r3, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	d100      	bne.n	8003506 <memset+0xa>
 8003504:	4770      	bx	lr
 8003506:	f803 1b01 	strb.w	r1, [r3], #1
 800350a:	e7f9      	b.n	8003500 <memset+0x4>

0800350c <_close_r>:
 800350c:	b538      	push	{r3, r4, r5, lr}
 800350e:	4d06      	ldr	r5, [pc, #24]	; (8003528 <_close_r+0x1c>)
 8003510:	2300      	movs	r3, #0
 8003512:	4604      	mov	r4, r0
 8003514:	4608      	mov	r0, r1
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd fafb 	bl	8000b12 <_close>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d102      	bne.n	8003526 <_close_r+0x1a>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	b103      	cbz	r3, 8003526 <_close_r+0x1a>
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	bd38      	pop	{r3, r4, r5, pc}
 8003528:	200006e8 	.word	0x200006e8

0800352c <_lseek_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4d07      	ldr	r5, [pc, #28]	; (800354c <_lseek_r+0x20>)
 8003530:	4604      	mov	r4, r0
 8003532:	4608      	mov	r0, r1
 8003534:	4611      	mov	r1, r2
 8003536:	2200      	movs	r2, #0
 8003538:	602a      	str	r2, [r5, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f7fd fb10 	bl	8000b60 <_lseek>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d102      	bne.n	800354a <_lseek_r+0x1e>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	b103      	cbz	r3, 800354a <_lseek_r+0x1e>
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	bd38      	pop	{r3, r4, r5, pc}
 800354c:	200006e8 	.word	0x200006e8

08003550 <_read_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4d07      	ldr	r5, [pc, #28]	; (8003570 <_read_r+0x20>)
 8003554:	4604      	mov	r4, r0
 8003556:	4608      	mov	r0, r1
 8003558:	4611      	mov	r1, r2
 800355a:	2200      	movs	r2, #0
 800355c:	602a      	str	r2, [r5, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f7fd fa9e 	bl	8000aa0 <_read>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_read_r+0x1e>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b103      	cbz	r3, 800356e <_read_r+0x1e>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	200006e8 	.word	0x200006e8

08003574 <_write_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4d07      	ldr	r5, [pc, #28]	; (8003594 <_write_r+0x20>)
 8003578:	4604      	mov	r4, r0
 800357a:	4608      	mov	r0, r1
 800357c:	4611      	mov	r1, r2
 800357e:	2200      	movs	r2, #0
 8003580:	602a      	str	r2, [r5, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f7fd faa9 	bl	8000ada <_write>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d102      	bne.n	8003592 <_write_r+0x1e>
 800358c:	682b      	ldr	r3, [r5, #0]
 800358e:	b103      	cbz	r3, 8003592 <_write_r+0x1e>
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	200006e8 	.word	0x200006e8

08003598 <__errno>:
 8003598:	4b01      	ldr	r3, [pc, #4]	; (80035a0 <__errno+0x8>)
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20000064 	.word	0x20000064

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	4d0d      	ldr	r5, [pc, #52]	; (80035dc <__libc_init_array+0x38>)
 80035a8:	4c0d      	ldr	r4, [pc, #52]	; (80035e0 <__libc_init_array+0x3c>)
 80035aa:	1b64      	subs	r4, r4, r5
 80035ac:	10a4      	asrs	r4, r4, #2
 80035ae:	2600      	movs	r6, #0
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	4d0b      	ldr	r5, [pc, #44]	; (80035e4 <__libc_init_array+0x40>)
 80035b6:	4c0c      	ldr	r4, [pc, #48]	; (80035e8 <__libc_init_array+0x44>)
 80035b8:	f000 fa54 	bl	8003a64 <_init>
 80035bc:	1b64      	subs	r4, r4, r5
 80035be:	10a4      	asrs	r4, r4, #2
 80035c0:	2600      	movs	r6, #0
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	08003aac 	.word	0x08003aac
 80035e0:	08003aac 	.word	0x08003aac
 80035e4:	08003aac 	.word	0x08003aac
 80035e8:	08003ab0 	.word	0x08003ab0

080035ec <__retarget_lock_acquire_recursive>:
 80035ec:	4770      	bx	lr

080035ee <__retarget_lock_release_recursive>:
 80035ee:	4770      	bx	lr

080035f0 <_free_r>:
 80035f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d044      	beq.n	8003680 <_free_r+0x90>
 80035f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fa:	9001      	str	r0, [sp, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003602:	bfb8      	it	lt
 8003604:	18e4      	addlt	r4, r4, r3
 8003606:	f000 f8df 	bl	80037c8 <__malloc_lock>
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <_free_r+0x94>)
 800360c:	9801      	ldr	r0, [sp, #4]
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	b933      	cbnz	r3, 8003620 <_free_r+0x30>
 8003612:	6063      	str	r3, [r4, #4]
 8003614:	6014      	str	r4, [r2, #0]
 8003616:	b003      	add	sp, #12
 8003618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800361c:	f000 b8da 	b.w	80037d4 <__malloc_unlock>
 8003620:	42a3      	cmp	r3, r4
 8003622:	d908      	bls.n	8003636 <_free_r+0x46>
 8003624:	6825      	ldr	r5, [r4, #0]
 8003626:	1961      	adds	r1, r4, r5
 8003628:	428b      	cmp	r3, r1
 800362a:	bf01      	itttt	eq
 800362c:	6819      	ldreq	r1, [r3, #0]
 800362e:	685b      	ldreq	r3, [r3, #4]
 8003630:	1949      	addeq	r1, r1, r5
 8003632:	6021      	streq	r1, [r4, #0]
 8003634:	e7ed      	b.n	8003612 <_free_r+0x22>
 8003636:	461a      	mov	r2, r3
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b10b      	cbz	r3, 8003640 <_free_r+0x50>
 800363c:	42a3      	cmp	r3, r4
 800363e:	d9fa      	bls.n	8003636 <_free_r+0x46>
 8003640:	6811      	ldr	r1, [r2, #0]
 8003642:	1855      	adds	r5, r2, r1
 8003644:	42a5      	cmp	r5, r4
 8003646:	d10b      	bne.n	8003660 <_free_r+0x70>
 8003648:	6824      	ldr	r4, [r4, #0]
 800364a:	4421      	add	r1, r4
 800364c:	1854      	adds	r4, r2, r1
 800364e:	42a3      	cmp	r3, r4
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	d1e0      	bne.n	8003616 <_free_r+0x26>
 8003654:	681c      	ldr	r4, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	6053      	str	r3, [r2, #4]
 800365a:	440c      	add	r4, r1
 800365c:	6014      	str	r4, [r2, #0]
 800365e:	e7da      	b.n	8003616 <_free_r+0x26>
 8003660:	d902      	bls.n	8003668 <_free_r+0x78>
 8003662:	230c      	movs	r3, #12
 8003664:	6003      	str	r3, [r0, #0]
 8003666:	e7d6      	b.n	8003616 <_free_r+0x26>
 8003668:	6825      	ldr	r5, [r4, #0]
 800366a:	1961      	adds	r1, r4, r5
 800366c:	428b      	cmp	r3, r1
 800366e:	bf04      	itt	eq
 8003670:	6819      	ldreq	r1, [r3, #0]
 8003672:	685b      	ldreq	r3, [r3, #4]
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	bf04      	itt	eq
 8003678:	1949      	addeq	r1, r1, r5
 800367a:	6021      	streq	r1, [r4, #0]
 800367c:	6054      	str	r4, [r2, #4]
 800367e:	e7ca      	b.n	8003616 <_free_r+0x26>
 8003680:	b003      	add	sp, #12
 8003682:	bd30      	pop	{r4, r5, pc}
 8003684:	200006f0 	.word	0x200006f0

08003688 <sbrk_aligned>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4e0e      	ldr	r6, [pc, #56]	; (80036c4 <sbrk_aligned+0x3c>)
 800368c:	460c      	mov	r4, r1
 800368e:	6831      	ldr	r1, [r6, #0]
 8003690:	4605      	mov	r5, r0
 8003692:	b911      	cbnz	r1, 800369a <sbrk_aligned+0x12>
 8003694:	f000 f9d6 	bl	8003a44 <_sbrk_r>
 8003698:	6030      	str	r0, [r6, #0]
 800369a:	4621      	mov	r1, r4
 800369c:	4628      	mov	r0, r5
 800369e:	f000 f9d1 	bl	8003a44 <_sbrk_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d00a      	beq.n	80036bc <sbrk_aligned+0x34>
 80036a6:	1cc4      	adds	r4, r0, #3
 80036a8:	f024 0403 	bic.w	r4, r4, #3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d007      	beq.n	80036c0 <sbrk_aligned+0x38>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 f9c6 	bl	8003a44 <_sbrk_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d101      	bne.n	80036c0 <sbrk_aligned+0x38>
 80036bc:	f04f 34ff 	mov.w	r4, #4294967295
 80036c0:	4620      	mov	r0, r4
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	200006f4 	.word	0x200006f4

080036c8 <_malloc_r>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	1ccd      	adds	r5, r1, #3
 80036ce:	f025 0503 	bic.w	r5, r5, #3
 80036d2:	3508      	adds	r5, #8
 80036d4:	2d0c      	cmp	r5, #12
 80036d6:	bf38      	it	cc
 80036d8:	250c      	movcc	r5, #12
 80036da:	2d00      	cmp	r5, #0
 80036dc:	4607      	mov	r7, r0
 80036de:	db01      	blt.n	80036e4 <_malloc_r+0x1c>
 80036e0:	42a9      	cmp	r1, r5
 80036e2:	d905      	bls.n	80036f0 <_malloc_r+0x28>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	2600      	movs	r6, #0
 80036ea:	4630      	mov	r0, r6
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037c4 <_malloc_r+0xfc>
 80036f4:	f000 f868 	bl	80037c8 <__malloc_lock>
 80036f8:	f8d8 3000 	ldr.w	r3, [r8]
 80036fc:	461c      	mov	r4, r3
 80036fe:	bb5c      	cbnz	r4, 8003758 <_malloc_r+0x90>
 8003700:	4629      	mov	r1, r5
 8003702:	4638      	mov	r0, r7
 8003704:	f7ff ffc0 	bl	8003688 <sbrk_aligned>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	4604      	mov	r4, r0
 800370c:	d155      	bne.n	80037ba <_malloc_r+0xf2>
 800370e:	f8d8 4000 	ldr.w	r4, [r8]
 8003712:	4626      	mov	r6, r4
 8003714:	2e00      	cmp	r6, #0
 8003716:	d145      	bne.n	80037a4 <_malloc_r+0xdc>
 8003718:	2c00      	cmp	r4, #0
 800371a:	d048      	beq.n	80037ae <_malloc_r+0xe6>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4631      	mov	r1, r6
 8003720:	4638      	mov	r0, r7
 8003722:	eb04 0903 	add.w	r9, r4, r3
 8003726:	f000 f98d 	bl	8003a44 <_sbrk_r>
 800372a:	4581      	cmp	r9, r0
 800372c:	d13f      	bne.n	80037ae <_malloc_r+0xe6>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	1a6d      	subs	r5, r5, r1
 8003732:	4629      	mov	r1, r5
 8003734:	4638      	mov	r0, r7
 8003736:	f7ff ffa7 	bl	8003688 <sbrk_aligned>
 800373a:	3001      	adds	r0, #1
 800373c:	d037      	beq.n	80037ae <_malloc_r+0xe6>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	442b      	add	r3, r5
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	f8d8 3000 	ldr.w	r3, [r8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d038      	beq.n	80037be <_malloc_r+0xf6>
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	42a2      	cmp	r2, r4
 8003750:	d12b      	bne.n	80037aa <_malloc_r+0xe2>
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e00f      	b.n	8003778 <_malloc_r+0xb0>
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	1b52      	subs	r2, r2, r5
 800375c:	d41f      	bmi.n	800379e <_malloc_r+0xd6>
 800375e:	2a0b      	cmp	r2, #11
 8003760:	d917      	bls.n	8003792 <_malloc_r+0xca>
 8003762:	1961      	adds	r1, r4, r5
 8003764:	42a3      	cmp	r3, r4
 8003766:	6025      	str	r5, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	6059      	strne	r1, [r3, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	bf08      	it	eq
 8003770:	f8c8 1000 	streq.w	r1, [r8]
 8003774:	5162      	str	r2, [r4, r5]
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	4638      	mov	r0, r7
 800377a:	f104 060b 	add.w	r6, r4, #11
 800377e:	f000 f829 	bl	80037d4 <__malloc_unlock>
 8003782:	f026 0607 	bic.w	r6, r6, #7
 8003786:	1d23      	adds	r3, r4, #4
 8003788:	1af2      	subs	r2, r6, r3
 800378a:	d0ae      	beq.n	80036ea <_malloc_r+0x22>
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	50a3      	str	r3, [r4, r2]
 8003790:	e7ab      	b.n	80036ea <_malloc_r+0x22>
 8003792:	42a3      	cmp	r3, r4
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	d1dd      	bne.n	8003754 <_malloc_r+0x8c>
 8003798:	f8c8 2000 	str.w	r2, [r8]
 800379c:	e7ec      	b.n	8003778 <_malloc_r+0xb0>
 800379e:	4623      	mov	r3, r4
 80037a0:	6864      	ldr	r4, [r4, #4]
 80037a2:	e7ac      	b.n	80036fe <_malloc_r+0x36>
 80037a4:	4634      	mov	r4, r6
 80037a6:	6876      	ldr	r6, [r6, #4]
 80037a8:	e7b4      	b.n	8003714 <_malloc_r+0x4c>
 80037aa:	4613      	mov	r3, r2
 80037ac:	e7cc      	b.n	8003748 <_malloc_r+0x80>
 80037ae:	230c      	movs	r3, #12
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4638      	mov	r0, r7
 80037b4:	f000 f80e 	bl	80037d4 <__malloc_unlock>
 80037b8:	e797      	b.n	80036ea <_malloc_r+0x22>
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	e7dc      	b.n	8003778 <_malloc_r+0xb0>
 80037be:	605b      	str	r3, [r3, #4]
 80037c0:	deff      	udf	#255	; 0xff
 80037c2:	bf00      	nop
 80037c4:	200006f0 	.word	0x200006f0

080037c8 <__malloc_lock>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__malloc_lock+0x8>)
 80037ca:	f7ff bf0f 	b.w	80035ec <__retarget_lock_acquire_recursive>
 80037ce:	bf00      	nop
 80037d0:	200006ec 	.word	0x200006ec

080037d4 <__malloc_unlock>:
 80037d4:	4801      	ldr	r0, [pc, #4]	; (80037dc <__malloc_unlock+0x8>)
 80037d6:	f7ff bf0a 	b.w	80035ee <__retarget_lock_release_recursive>
 80037da:	bf00      	nop
 80037dc:	200006ec 	.word	0x200006ec

080037e0 <__sflush_r>:
 80037e0:	898a      	ldrh	r2, [r1, #12]
 80037e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e6:	4605      	mov	r5, r0
 80037e8:	0710      	lsls	r0, r2, #28
 80037ea:	460c      	mov	r4, r1
 80037ec:	d458      	bmi.n	80038a0 <__sflush_r+0xc0>
 80037ee:	684b      	ldr	r3, [r1, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dc05      	bgt.n	8003800 <__sflush_r+0x20>
 80037f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	dc02      	bgt.n	8003800 <__sflush_r+0x20>
 80037fa:	2000      	movs	r0, #0
 80037fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003802:	2e00      	cmp	r6, #0
 8003804:	d0f9      	beq.n	80037fa <__sflush_r+0x1a>
 8003806:	2300      	movs	r3, #0
 8003808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800380c:	682f      	ldr	r7, [r5, #0]
 800380e:	6a21      	ldr	r1, [r4, #32]
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	d032      	beq.n	800387a <__sflush_r+0x9a>
 8003814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	075a      	lsls	r2, r3, #29
 800381a:	d505      	bpl.n	8003828 <__sflush_r+0x48>
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	1ac0      	subs	r0, r0, r3
 8003820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003822:	b10b      	cbz	r3, 8003828 <__sflush_r+0x48>
 8003824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003826:	1ac0      	subs	r0, r0, r3
 8003828:	2300      	movs	r3, #0
 800382a:	4602      	mov	r2, r0
 800382c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800382e:	6a21      	ldr	r1, [r4, #32]
 8003830:	4628      	mov	r0, r5
 8003832:	47b0      	blx	r6
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	d106      	bne.n	8003848 <__sflush_r+0x68>
 800383a:	6829      	ldr	r1, [r5, #0]
 800383c:	291d      	cmp	r1, #29
 800383e:	d82b      	bhi.n	8003898 <__sflush_r+0xb8>
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <__sflush_r+0x108>)
 8003842:	410a      	asrs	r2, r1
 8003844:	07d6      	lsls	r6, r2, #31
 8003846:	d427      	bmi.n	8003898 <__sflush_r+0xb8>
 8003848:	2200      	movs	r2, #0
 800384a:	6062      	str	r2, [r4, #4]
 800384c:	04d9      	lsls	r1, r3, #19
 800384e:	6922      	ldr	r2, [r4, #16]
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	d504      	bpl.n	800385e <__sflush_r+0x7e>
 8003854:	1c42      	adds	r2, r0, #1
 8003856:	d101      	bne.n	800385c <__sflush_r+0x7c>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b903      	cbnz	r3, 800385e <__sflush_r+0x7e>
 800385c:	6560      	str	r0, [r4, #84]	; 0x54
 800385e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003860:	602f      	str	r7, [r5, #0]
 8003862:	2900      	cmp	r1, #0
 8003864:	d0c9      	beq.n	80037fa <__sflush_r+0x1a>
 8003866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800386a:	4299      	cmp	r1, r3
 800386c:	d002      	beq.n	8003874 <__sflush_r+0x94>
 800386e:	4628      	mov	r0, r5
 8003870:	f7ff febe 	bl	80035f0 <_free_r>
 8003874:	2000      	movs	r0, #0
 8003876:	6360      	str	r0, [r4, #52]	; 0x34
 8003878:	e7c0      	b.n	80037fc <__sflush_r+0x1c>
 800387a:	2301      	movs	r3, #1
 800387c:	4628      	mov	r0, r5
 800387e:	47b0      	blx	r6
 8003880:	1c41      	adds	r1, r0, #1
 8003882:	d1c8      	bne.n	8003816 <__sflush_r+0x36>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c5      	beq.n	8003816 <__sflush_r+0x36>
 800388a:	2b1d      	cmp	r3, #29
 800388c:	d001      	beq.n	8003892 <__sflush_r+0xb2>
 800388e:	2b16      	cmp	r3, #22
 8003890:	d101      	bne.n	8003896 <__sflush_r+0xb6>
 8003892:	602f      	str	r7, [r5, #0]
 8003894:	e7b1      	b.n	80037fa <__sflush_r+0x1a>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	e7ad      	b.n	80037fc <__sflush_r+0x1c>
 80038a0:	690f      	ldr	r7, [r1, #16]
 80038a2:	2f00      	cmp	r7, #0
 80038a4:	d0a9      	beq.n	80037fa <__sflush_r+0x1a>
 80038a6:	0793      	lsls	r3, r2, #30
 80038a8:	680e      	ldr	r6, [r1, #0]
 80038aa:	bf08      	it	eq
 80038ac:	694b      	ldreq	r3, [r1, #20]
 80038ae:	600f      	str	r7, [r1, #0]
 80038b0:	bf18      	it	ne
 80038b2:	2300      	movne	r3, #0
 80038b4:	eba6 0807 	sub.w	r8, r6, r7
 80038b8:	608b      	str	r3, [r1, #8]
 80038ba:	f1b8 0f00 	cmp.w	r8, #0
 80038be:	dd9c      	ble.n	80037fa <__sflush_r+0x1a>
 80038c0:	6a21      	ldr	r1, [r4, #32]
 80038c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038c4:	4643      	mov	r3, r8
 80038c6:	463a      	mov	r2, r7
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b0      	blx	r6
 80038cc:	2800      	cmp	r0, #0
 80038ce:	dc06      	bgt.n	80038de <__sflush_r+0xfe>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	81a3      	strh	r3, [r4, #12]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e78e      	b.n	80037fc <__sflush_r+0x1c>
 80038de:	4407      	add	r7, r0
 80038e0:	eba8 0800 	sub.w	r8, r8, r0
 80038e4:	e7e9      	b.n	80038ba <__sflush_r+0xda>
 80038e6:	bf00      	nop
 80038e8:	dfbffffe 	.word	0xdfbffffe

080038ec <_fflush_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	690b      	ldr	r3, [r1, #16]
 80038f0:	4605      	mov	r5, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	b913      	cbnz	r3, 80038fc <_fflush_r+0x10>
 80038f6:	2500      	movs	r5, #0
 80038f8:	4628      	mov	r0, r5
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	b118      	cbz	r0, 8003906 <_fflush_r+0x1a>
 80038fe:	6a03      	ldr	r3, [r0, #32]
 8003900:	b90b      	cbnz	r3, 8003906 <_fflush_r+0x1a>
 8003902:	f7ff fc91 	bl	8003228 <__sinit>
 8003906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f3      	beq.n	80038f6 <_fflush_r+0xa>
 800390e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003910:	07d0      	lsls	r0, r2, #31
 8003912:	d404      	bmi.n	800391e <_fflush_r+0x32>
 8003914:	0599      	lsls	r1, r3, #22
 8003916:	d402      	bmi.n	800391e <_fflush_r+0x32>
 8003918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800391a:	f7ff fe67 	bl	80035ec <__retarget_lock_acquire_recursive>
 800391e:	4628      	mov	r0, r5
 8003920:	4621      	mov	r1, r4
 8003922:	f7ff ff5d 	bl	80037e0 <__sflush_r>
 8003926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003928:	07da      	lsls	r2, r3, #31
 800392a:	4605      	mov	r5, r0
 800392c:	d4e4      	bmi.n	80038f8 <_fflush_r+0xc>
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	059b      	lsls	r3, r3, #22
 8003932:	d4e1      	bmi.n	80038f8 <_fflush_r+0xc>
 8003934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003936:	f7ff fe5a 	bl	80035ee <__retarget_lock_release_recursive>
 800393a:	e7dd      	b.n	80038f8 <_fflush_r+0xc>

0800393c <__swhatbuf_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	460c      	mov	r4, r1
 8003940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003944:	2900      	cmp	r1, #0
 8003946:	b096      	sub	sp, #88	; 0x58
 8003948:	4615      	mov	r5, r2
 800394a:	461e      	mov	r6, r3
 800394c:	da0d      	bge.n	800396a <__swhatbuf_r+0x2e>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	bf0c      	ite	eq
 800395a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800395e:	2340      	movne	r3, #64	; 0x40
 8003960:	2000      	movs	r0, #0
 8003962:	6031      	str	r1, [r6, #0]
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	b016      	add	sp, #88	; 0x58
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	466a      	mov	r2, sp
 800396c:	f000 f848 	bl	8003a00 <_fstat_r>
 8003970:	2800      	cmp	r0, #0
 8003972:	dbec      	blt.n	800394e <__swhatbuf_r+0x12>
 8003974:	9901      	ldr	r1, [sp, #4]
 8003976:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800397a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800397e:	4259      	negs	r1, r3
 8003980:	4159      	adcs	r1, r3
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	e7eb      	b.n	8003960 <__swhatbuf_r+0x24>

08003988 <__smakebuf_r>:
 8003988:	898b      	ldrh	r3, [r1, #12]
 800398a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800398c:	079d      	lsls	r5, r3, #30
 800398e:	4606      	mov	r6, r0
 8003990:	460c      	mov	r4, r1
 8003992:	d507      	bpl.n	80039a4 <__smakebuf_r+0x1c>
 8003994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2301      	movs	r3, #1
 800399e:	6163      	str	r3, [r4, #20]
 80039a0:	b002      	add	sp, #8
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	ab01      	add	r3, sp, #4
 80039a6:	466a      	mov	r2, sp
 80039a8:	f7ff ffc8 	bl	800393c <__swhatbuf_r>
 80039ac:	9900      	ldr	r1, [sp, #0]
 80039ae:	4605      	mov	r5, r0
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff fe89 	bl	80036c8 <_malloc_r>
 80039b6:	b948      	cbnz	r0, 80039cc <__smakebuf_r+0x44>
 80039b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039bc:	059a      	lsls	r2, r3, #22
 80039be:	d4ef      	bmi.n	80039a0 <__smakebuf_r+0x18>
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7e3      	b.n	8003994 <__smakebuf_r+0xc>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	9b00      	ldr	r3, [sp, #0]
 80039d8:	6163      	str	r3, [r4, #20]
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	6120      	str	r0, [r4, #16]
 80039de:	b15b      	cbz	r3, 80039f8 <__smakebuf_r+0x70>
 80039e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f81d 	bl	8003a24 <_isatty_r>
 80039ea:	b128      	cbz	r0, 80039f8 <__smakebuf_r+0x70>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	431d      	orrs	r5, r3
 80039fc:	81a5      	strh	r5, [r4, #12]
 80039fe:	e7cf      	b.n	80039a0 <__smakebuf_r+0x18>

08003a00 <_fstat_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4d07      	ldr	r5, [pc, #28]	; (8003a20 <_fstat_r+0x20>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	f7fd f88c 	bl	8000b2a <_fstat>
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	d102      	bne.n	8003a1c <_fstat_r+0x1c>
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	b103      	cbz	r3, 8003a1c <_fstat_r+0x1c>
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
 8003a1e:	bf00      	nop
 8003a20:	200006e8 	.word	0x200006e8

08003a24 <_isatty_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	; (8003a40 <_isatty_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd f88b 	bl	8000b4a <_isatty>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_isatty_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_isatty_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	200006e8 	.word	0x200006e8

08003a44 <_sbrk_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d06      	ldr	r5, [pc, #24]	; (8003a60 <_sbrk_r+0x1c>)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	602b      	str	r3, [r5, #0]
 8003a50:	f7fd f894 	bl	8000b7c <_sbrk>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_sbrk_r+0x1a>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_sbrk_r+0x1a>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	200006e8 	.word	0x200006e8

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

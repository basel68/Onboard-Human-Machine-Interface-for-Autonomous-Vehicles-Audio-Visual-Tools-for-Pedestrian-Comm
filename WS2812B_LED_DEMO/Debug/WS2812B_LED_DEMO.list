
WS2812B_LED_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027b0  080027b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001d0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000664f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015bb  00000000  00000000  0002672a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000660  00000000  00000000  00027ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004af  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002107c  00000000  00000000  000287f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007d3c  00000000  00000000  00049873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3d49  00000000  00000000  000515af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ef4  00000000  00000000  001152f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001171ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002768 	.word	0x08002768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002768 	.word	0x08002768

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <WS2812B_spi>:


#include "WS2812B_led.h"
static void WS2812B_spi(uint32_t color);

static void WS2812B_spi(uint32_t color){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint8_t data[24];
	memset(data,0, sizeof(data));
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	2218      	movs	r2, #24
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fe93 	bl	8002200 <memset>
//	data[1]=color>>8;
//	data[2]=color;
//	for(int i=9;i>0;i--){
//		HAL_SPI_Transmit(&hspi1, data, sizeof(data), 1000);
//	}
	int index=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=23;i>=0;i--){
 80004de:	2317      	movs	r3, #23
 80004e0:	623b      	str	r3, [r7, #32]
 80004e2:	e01b      	b.n	800051c <WS2812B_spi+0x58>
		if((color>>i)& SET){
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d008      	beq.n	8000506 <WS2812B_spi+0x42>
			data[index++]=0b110;
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	627a      	str	r2, [r7, #36]	; 0x24
 80004fa:	3328      	adds	r3, #40	; 0x28
 80004fc:	443b      	add	r3, r7
 80004fe:	2206      	movs	r2, #6
 8000500:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000504:	e007      	b.n	8000516 <WS2812B_spi+0x52>
		}
		else{
			data[index++]=0b100;
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	627a      	str	r2, [r7, #36]	; 0x24
 800050c:	3328      	adds	r3, #40	; 0x28
 800050e:	443b      	add	r3, r7
 8000510:	2204      	movs	r2, #4
 8000512:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(int i=23;i>=0;i--){
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	3b01      	subs	r3, #1
 800051a:	623b      	str	r3, [r7, #32]
 800051c:	6a3b      	ldr	r3, [r7, #32]
 800051e:	2b00      	cmp	r3, #0
 8000520:	dae0      	bge.n	80004e4 <WS2812B_spi+0x20>
		}
	}
		HAL_SPI_Transmit(&hspi1, data, sizeof(data), 1000);
 8000522:	f107 0108 	add.w	r1, r7, #8
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	2218      	movs	r2, #24
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <WS2812B_spi+0x78>)
 800052e:	f001 fa7c 	bl	8001a2a <HAL_SPI_Transmit>

}
 8000532:	bf00      	nop
 8000534:	3728      	adds	r7, #40	; 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000084 	.word	0x20000084

08000540 <WS2812B_send>:
void WS2812B_send(led_struct_handle_t* led_handle){
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t leds_number=led_handle->led_number;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint32_t color=led_handle->color;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	60bb      	str	r3, [r7, #8]
	while(leds_number>0){
 8000554:	e005      	b.n	8000562 <WS2812B_send+0x22>
		WS2812B_spi(color);
 8000556:	68b8      	ldr	r0, [r7, #8]
 8000558:	f7ff ffb4 	bl	80004c4 <WS2812B_spi>
		leds_number--;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	3b01      	subs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
	while(leds_number>0){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1f6      	bne.n	8000556 <WS2812B_send+0x16>
	}
	HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 faa3 	bl	8000ab4 <HAL_Delay>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <main>:

#include "main.h"
static void spi_init();
SPI_HandleTypeDef hspi1;
led_struct_handle_t led_handle;
int main (){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	HAL_Init();
 800057c:	f000 fa3c 	bl	80009f8 <HAL_Init>
	system_clock_config_HSI(SYS_CLOCK_FREQ_70_MHZ);
 8000580:	2002      	movs	r0, #2
 8000582:	f000 f813 	bl	80005ac <system_clock_config_HSI>
	printf("hello\n");
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <main+0x2c>)
 8000588:	f001 fd5a 	bl	8002040 <puts>

	spi_init();
 800058c:	f000 f88a 	bl	80006a4 <spi_init>
	led_handle.color=BLUE;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <main+0x30>)
 8000592:	22ff      	movs	r2, #255	; 0xff
 8000594:	605a      	str	r2, [r3, #4]
	led_handle.led_number=15;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <main+0x30>)
 8000598:	220f      	movs	r2, #15
 800059a:	701a      	strb	r2, [r3, #0]
	while(1){
		WS2812B_send(&led_handle);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <main+0x30>)
 800059e:	f7ff ffcf 	bl	8000540 <WS2812B_send>
 80005a2:	e7fb      	b.n	800059c <main+0x24>
 80005a4:	08002780 	.word	0x08002780
 80005a8:	200000dc 	.word	0x200000dc

080005ac <system_clock_config_HSI>:
	}

	return 0;
}
void system_clock_config_HSI(uint8_t clock_freq ){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	  RCC_OscInitTypeDef osc_init = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe1e 	bl	8002200 <memset>
	  RCC_ClkInitTypeDef clk_init = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
	  uint32_t FLatency =0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c

	  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
	  osc_init.HSIState=RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
	  osc_init.HSICalibrationValue=RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  osc_init.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
	  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
	  switch (clock_freq){
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d002      	beq.n	80005f8 <system_clock_config_HSI+0x4c>
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d017      	beq.n	8000626 <system_clock_config_HSI+0x7a>
		  FLatency=FLASH_ACR_LATENCY_2WS;
		  break;

		}
	  default:
		  return;
 80005f6:	e04f      	b.n	8000698 <system_clock_config_HSI+0xec>
		  osc_init.PLL.PLLM=16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=160;
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000608:	230f      	movs	r3, #15
 800060a:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 8000624:	e016      	b.n	8000654 <system_clock_config_HSI+0xa8>
		  osc_init.PLL.PLLM=16;
 8000626:	2310      	movs	r3, #16
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osc_init.PLL.PLLN=140;
 800062a:	238c      	movs	r3, #140	; 0x8c
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
		  osc_init.PLL.PLLP=2;
 800062e:	2302      	movs	r3, #2
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
		  osc_init.PLL.PLLQ  = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
		  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
		  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
		  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
		  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	617b      	str	r3, [r7, #20]
		  clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
		  FLatency=FLASH_ACR_LATENCY_2WS;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
		  break;
 8000652:	bf00      	nop
	  }
	 if( HAL_RCC_OscConfig(&osc_init)!= HAL_OK){
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fced 	bl	8001038 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <system_clock_config_HSI+0xbc>
		 Error_Handler();
 8000664:	f000 f856 	bl	8000714 <Error_Handler>
	 }
	 if( HAL_RCC_ClockConfig(&clk_init, FLatency)!= HAL_OK){
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff5a 	bl	8001528 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <system_clock_config_HSI+0xd2>
			 Error_Handler();
 800067a:	f000 f84b 	bl	8000714 <Error_Handler>
		 }

	 //Systick configuration
	 	 // for 1 ms for every systick interrupt
	 	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800067e:	f001 f93f 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8000682:	4603      	mov	r3, r0
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <system_clock_config_HSI+0xf4>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	099b      	lsrs	r3, r3, #6
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fb0e 	bl	8000cae <HAL_SYSTICK_Config>
	 	// either hclck/8 or hclck so we decided hclk
	 	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000692:	2004      	movs	r0, #4
 8000694:	f000 fb18 	bl	8000cc8 <HAL_SYSTICK_CLKSourceConfig>


}
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	10624dd3 	.word	0x10624dd3

080006a4 <spi_init>:
static void spi_init(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <spi_init+0x68>)
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <spi_init+0x6c>)
 80006ac:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <spi_init+0x68>)
 80006b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b4:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <spi_init+0x68>)
 80006b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006bc:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <spi_init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <spi_init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <spi_init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <spi_init+0x68>)
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <spi_init+0x68>)
 80006da:	2218      	movs	r2, #24
 80006dc:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <spi_init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <spi_init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <spi_init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <spi_init+0x68>)
 80006f2:	220a      	movs	r2, #10
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <spi_init+0x68>)
 80006f8:	f001 f90e 	bl	8001918 <HAL_SPI_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <spi_init+0x62>
	  {
	    Error_Handler();
 8000702:	f000 f807 	bl	8000714 <Error_Handler>
	  }
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084
 8000710:	40013000 	.word	0x40013000

08000714 <Error_Handler>:

void Error_Handler(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	printf("error occured\n");
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <Error_Handler+0xc>)
 800071a:	f001 fc91 	bl	8002040 <puts>
	while(1);
 800071e:	e7fe      	b.n	800071e <Error_Handler+0xa>
 8000720:	08002788 	.word	0x08002788

08000724 <HAL_MspInit>:
 *      Author: BASSEL
 */
#include "main.h"
//will do low level processor specific inits.
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 fa99 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x40>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <HAL_MspInit+0x40>)
 8000734:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000738:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f06f 000b 	mvn.w	r0, #11
 8000742:	f000 fa98 	bl	8000c76 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	f06f 000a 	mvn.w	r0, #10
 800074e:	f000 fa92 	bl	8000c76 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	f06f 0009 	mvn.w	r0, #9
 800075a:	f000 fa8c 	bl	8000c76 <HAL_NVIC_SetPriority>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <HAL_SPI_MspInit>:

/* Init the low level hardware : GPIO, CLOCK, NVIC... */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi){
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	if(hspi->Instance==SPI1){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_SPI_MspInit+0x74>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12b      	bne.n	80007d2 <HAL_SPI_MspInit+0x6a>
	//enable port A and SPI peripherals clocks
	 __HAL_RCC_SPI1_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_SPI_MspInit+0x78>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
	//init clk and MOSI pins

	GPIO_InitStruct.Pin=SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode=GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate=GPIO_AF5_SPI1;
 80007ba:	2305      	movs	r3, #5
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_SPI_MspInit+0x7c>)
 80007ce:	f000 fa97 	bl	8000d00 <HAL_GPIO_Init>

	}
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <ITM_SendChar+0x48>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <ITM_SendChar+0x48>)
 80007f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007fc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <ITM_SendChar+0x4c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <ITM_SendChar+0x4c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800080a:	bf00      	nop
 800080c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f8      	beq.n	800080c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800081a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	6013      	str	r3, [r2, #0]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000edfc 	.word	0xe000edfc
 8000834:	e0000e00 	.word	0xe0000e00

08000838 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e00a      	b.n	8000860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800084a:	f3af 8000 	nop.w
 800084e:	4601      	mov	r1, r0
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	60ba      	str	r2, [r7, #8]
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf0      	blt.n	800084a <_read+0x12>
  }

  return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e009      	b.n	8000898 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ffab 	bl	80007e8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf1      	blt.n	8000884 <_write+0x12>
  }
  return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_close>:

int _close(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d2:	605a      	str	r2, [r3, #4]
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_isatty>:

int _isatty(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f001 fcaa 	bl	800229c <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20020000 	.word	0x20020000
 8000974:	00000400 	.word	0x00000400
 8000978:	200000e4 	.word	0x200000e4
 800097c:	20000238 	.word	0x20000238

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009aa:	490e      	ldr	r1, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c0:	4c0b      	ldr	r4, [pc, #44]	; (80009f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ce:	f7ff ffd7 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f001 fc69 	bl	80022a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fdcf 	bl	8000578 <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009e8:	080027b8 	.word	0x080027b8
  ldr r2, =_sbss
 80009ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009f0:	20000238 	.word	0x20000238

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_Init+0x40>)
 8000a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_Init+0x40>)
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x40>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f91d 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff fe7a 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f927 	bl	8000cae <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f8fd 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000e8 	.word	0x200000e8

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff47 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff5c 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffb0 	bl	8000c1c <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d106      	bne.n	8000ce4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ce2:	e005      	b.n	8000cf0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cea:	f023 0304 	bic.w	r3, r3, #4
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e16b      	b.n	8000ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 815a 	bne.w	8000fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80b4 	beq.w	8000fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a5f      	ldr	r2, [pc, #380]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b5d      	ldr	r3, [pc, #372]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d02b      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d025      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01f      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00e      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e00c      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00a      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a32      	ldr	r2, [pc, #200]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f ae90 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40021400 	.word	0x40021400
 800102c:	40021800 	.word	0x40021800
 8001030:	40021c00 	.word	0x40021c00
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e267      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d00c      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106a:	2b08      	cmp	r3, #8
 800106c:	d112      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e242      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a75      	ldr	r2, [pc, #468]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6c      	ldr	r2, [pc, #432]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a68      	ldr	r2, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a65      	ldr	r2, [pc, #404]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcd4 	bl	8000a9c <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcd0 	bl	8000a9c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e207      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcc0 	bl	8000a9c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcbc 	bl	8000a9c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1f3      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1c7      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc75 	bl	8000a9c <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc71 	bl	8000a9c <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e1a8      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc54 	bl	8000a9c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc50 	bl	8000a9c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e187      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d036      	beq.n	8001290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fc34 	bl	8000a9c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc30 	bl	8000a9c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e167      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
 8001256:	e01b      	b.n	8001290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fc1d 	bl	8000a9c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	e00e      	b.n	8001284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fc19 	bl	8000a9c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d907      	bls.n	8001284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e150      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 8001278:	40023800 	.word	0x40023800
 800127c:	42470000 	.word	0x42470000
 8001280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ea      	bne.n	8001266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8097 	beq.w	80013cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b77      	ldr	r3, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b74      	ldr	r3, [pc, #464]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a73      	ldr	r2, [pc, #460]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbd9 	bl	8000a9c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fbd5 	bl	8000a9c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e10c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x2ea>
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x30c>
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a5b      	ldr	r2, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d015      	beq.n	8001390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fb9a 	bl	8000a9c <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fb96 	bl	8000a9c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0cb      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ee      	beq.n	800136c <HAL_RCC_OscConfig+0x334>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fb84 	bl	8000a9c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fb80 	bl	8000a9c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0b5      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a1 	beq.w	8001518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d05c      	beq.n	800149c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb54 	bl	8000a9c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb50 	bl	8000a9c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e087      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb29 	bl	8000a9c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fb25 	bl	8000a9c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e05c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x416>
 800146c:	e054      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fb12 	bl	8000a9c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fb0e 	bl	8000a9c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e045      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x444>
 800149a:	e03d      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e038      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d028      	beq.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d121      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d11a      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	3b01      	subs	r3, #1
 80014fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0cc      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d90c      	bls.n	8001564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d044      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e067      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fa40 	bl	8000a9c <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fa3c 	bl	8000a9c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f821 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f9b4 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08002798 	.word	0x08002798
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b094      	sub	sp, #80	; 0x50
 80016fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001700:	2300      	movs	r3, #0
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x40>
 8001718:	2b08      	cmp	r3, #8
 800171a:	f200 80e1 	bhi.w	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x34>
 8001722:	2b04      	cmp	r3, #4
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x3a>
 8001726:	e0db      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800172c:	e0db      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001732:	e0d8      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	2200      	movs	r2, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
 8001754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001798:	4659      	mov	r1, fp
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4651      	mov	r1, sl
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4651      	mov	r1, sl
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4651      	mov	r1, sl
 80017a8:	ebb2 0801 	subs.w	r8, r2, r1
 80017ac:	4659      	mov	r1, fp
 80017ae:	eb63 0901 	sbc.w	r9, r3, r1
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c6:	4690      	mov	r8, r2
 80017c8:	4699      	mov	r9, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	eb18 0303 	adds.w	r3, r8, r3
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	462b      	mov	r3, r5
 80017d4:	eb49 0303 	adc.w	r3, r9, r3
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017e6:	4629      	mov	r1, r5
 80017e8:	024b      	lsls	r3, r1, #9
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f0:	4621      	mov	r1, r4
 80017f2:	024a      	lsls	r2, r1, #9
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	2200      	movs	r2, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001804:	f7fe fce0 	bl	80001c8 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001810:	e058      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	4618      	mov	r0, r3
 800181c:	4611      	mov	r1, r2
 800181e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
 8001828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800182c:	4642      	mov	r2, r8
 800182e:	464b      	mov	r3, r9
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4641      	mov	r1, r8
 8001846:	ebb2 0a01 	subs.w	sl, r2, r1
 800184a:	4649      	mov	r1, r9
 800184c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800185c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001864:	ebb2 040a 	subs.w	r4, r2, sl
 8001868:	eb63 050b 	sbc.w	r5, r3, fp
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	00eb      	lsls	r3, r5, #3
 8001876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800187a:	00e2      	lsls	r2, r4, #3
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4643      	mov	r3, r8
 8001882:	18e3      	adds	r3, r4, r3
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	464b      	mov	r3, r9
 8001888:	eb45 0303 	adc.w	r3, r5, r3
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800189a:	4629      	mov	r1, r5
 800189c:	028b      	lsls	r3, r1, #10
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a4:	4621      	mov	r1, r4
 80018a6:	028a      	lsls	r2, r1, #10
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	61fa      	str	r2, [r7, #28]
 80018b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b8:	f7fe fc86 	bl	80001c8 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_GetHCLKFreq+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000

08001918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07b      	b.n	8001a22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800193a:	d009      	beq.n	8001950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
 8001942:	e005      	b.n	8001950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fefc 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	ea42 0103 	orr.w	r1, r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	f003 0104 	and.w	r1, r3, #4
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f003 0210 	and.w	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b088      	sub	sp, #32
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_SPI_Transmit+0x22>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e126      	b.n	8001c9a <HAL_SPI_Transmit+0x270>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a54:	f7ff f822 	bl	8000a9c <HAL_GetTick>
 8001a58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a6e:	e10b      	b.n	8001c88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_SPI_Transmit+0x52>
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a80:	e102      	b.n	8001c88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2203      	movs	r2, #3
 8001a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac8:	d10f      	bne.n	8001aea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	d007      	beq.n	8001b08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b10:	d14b      	bne.n	8001baa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_SPI_Transmit+0xf6>
 8001b1a:	8afb      	ldrh	r3, [r7, #22]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d13e      	bne.n	8001b9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	1c9a      	adds	r2, r3, #2
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b44:	e02b      	b.n	8001b9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d112      	bne.n	8001b7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	881a      	ldrh	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	1c9a      	adds	r2, r3, #2
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b78:	e011      	b.n	8001b9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b7a:	f7fe ff8f 	bl	8000a9c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d803      	bhi.n	8001b92 <HAL_SPI_Transmit+0x168>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d102      	bne.n	8001b98 <HAL_SPI_Transmit+0x16e>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b9c:	e074      	b.n	8001c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ce      	bne.n	8001b46 <HAL_SPI_Transmit+0x11c>
 8001ba8:	e04c      	b.n	8001c44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_SPI_Transmit+0x18e>
 8001bb2:	8afb      	ldrh	r3, [r7, #22]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d140      	bne.n	8001c3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bde:	e02c      	b.n	8001c3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d113      	bne.n	8001c16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c14:	e011      	b.n	8001c3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c16:	f7fe ff41 	bl	8000a9c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d803      	bhi.n	8001c2e <HAL_SPI_Transmit+0x204>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d102      	bne.n	8001c34 <HAL_SPI_Transmit+0x20a>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c38:	e026      	b.n	8001c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1cd      	bne.n	8001be0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f8b3 	bl	8001db4 <SPI_EndRxTxTransaction>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	77fb      	strb	r3, [r7, #31]
 8001c84:	e000      	b.n	8001c88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cb4:	f7fe fef2 	bl	8000a9c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cc4:	f7fe feea 	bl	8000a9c <HAL_GetTick>
 8001cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	015b      	lsls	r3, r3, #5
 8001cd0:	0d1b      	lsrs	r3, r3, #20
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cda:	e054      	b.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d050      	beq.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ce4:	f7fe feda 	bl	8000a9c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d902      	bls.n	8001cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13d      	bne.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d12:	d111      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1c:	d004      	beq.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d107      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d40:	d10f      	bne.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e017      	b.n	8001da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d19b      	bne.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <SPI_EndRxTxTransaction+0x7c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <SPI_EndRxTxTransaction+0x80>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0d5b      	lsrs	r3, r3, #21
 8001dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d112      	bne.n	8001e06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff ff5a 	bl	8001ca4 <SPI_WaitFlagStateUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e00f      	b.n	8001e26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d0f2      	beq.n	8001e06 <SPI_EndRxTxTransaction+0x52>
 8001e20:	e000      	b.n	8001e24 <SPI_EndRxTxTransaction+0x70>
        break;
 8001e22:	bf00      	nop
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000
 8001e34:	165e9f81 	.word	0x165e9f81

08001e38 <std>:
 8001e38:	2300      	movs	r3, #0
 8001e3a:	b510      	push	{r4, lr}
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e46:	6083      	str	r3, [r0, #8]
 8001e48:	8181      	strh	r1, [r0, #12]
 8001e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e4c:	81c2      	strh	r2, [r0, #14]
 8001e4e:	6183      	str	r3, [r0, #24]
 8001e50:	4619      	mov	r1, r3
 8001e52:	2208      	movs	r2, #8
 8001e54:	305c      	adds	r0, #92	; 0x5c
 8001e56:	f000 f9d3 	bl	8002200 <memset>
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <std+0x38>)
 8001e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <std+0x3c>)
 8001e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <std+0x40>)
 8001e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <std+0x44>)
 8001e68:	6224      	str	r4, [r4, #32]
 8001e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	bf00      	nop
 8001e70:	08002051 	.word	0x08002051
 8001e74:	08002073 	.word	0x08002073
 8001e78:	080020ab 	.word	0x080020ab
 8001e7c:	080020cf 	.word	0x080020cf

08001e80 <stdio_exit_handler>:
 8001e80:	4a02      	ldr	r2, [pc, #8]	; (8001e8c <stdio_exit_handler+0xc>)
 8001e82:	4903      	ldr	r1, [pc, #12]	; (8001e90 <stdio_exit_handler+0x10>)
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <stdio_exit_handler+0x14>)
 8001e86:	f000 b869 	b.w	8001f5c <_fwalk_sglue>
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	080025f1 	.word	0x080025f1
 8001e94:	20000018 	.word	0x20000018

08001e98 <cleanup_stdio>:
 8001e98:	6841      	ldr	r1, [r0, #4]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <cleanup_stdio+0x34>)
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	b510      	push	{r4, lr}
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	d001      	beq.n	8001ea8 <cleanup_stdio+0x10>
 8001ea4:	f000 fba4 	bl	80025f0 <_fflush_r>
 8001ea8:	68a1      	ldr	r1, [r4, #8]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <cleanup_stdio+0x38>)
 8001eac:	4299      	cmp	r1, r3
 8001eae:	d002      	beq.n	8001eb6 <cleanup_stdio+0x1e>
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f000 fb9d 	bl	80025f0 <_fflush_r>
 8001eb6:	68e1      	ldr	r1, [r4, #12]
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <cleanup_stdio+0x3c>)
 8001eba:	4299      	cmp	r1, r3
 8001ebc:	d004      	beq.n	8001ec8 <cleanup_stdio+0x30>
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec4:	f000 bb94 	b.w	80025f0 <_fflush_r>
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	200000ec 	.word	0x200000ec
 8001ed0:	20000154 	.word	0x20000154
 8001ed4:	200001bc 	.word	0x200001bc

08001ed8 <global_stdio_init.part.0>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <global_stdio_init.part.0+0x30>)
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <global_stdio_init.part.0+0x34>)
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <global_stdio_init.part.0+0x38>)
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	f7ff ffa6 	bl	8001e38 <std>
 8001eec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2109      	movs	r1, #9
 8001ef4:	f7ff ffa0 	bl	8001e38 <std>
 8001ef8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001efc:	2202      	movs	r2, #2
 8001efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f02:	2112      	movs	r1, #18
 8001f04:	f7ff bf98 	b.w	8001e38 <std>
 8001f08:	20000224 	.word	0x20000224
 8001f0c:	200000ec 	.word	0x200000ec
 8001f10:	08001e81 	.word	0x08001e81

08001f14 <__sfp_lock_acquire>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__sfp_lock_acquire+0x8>)
 8001f16:	f000 b9eb 	b.w	80022f0 <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	2000022d 	.word	0x2000022d

08001f20 <__sfp_lock_release>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__sfp_lock_release+0x8>)
 8001f22:	f000 b9e6 	b.w	80022f2 <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	2000022d 	.word	0x2000022d

08001f2c <__sinit>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
 8001f30:	f7ff fff0 	bl	8001f14 <__sfp_lock_acquire>
 8001f34:	6a23      	ldr	r3, [r4, #32]
 8001f36:	b11b      	cbz	r3, 8001f40 <__sinit+0x14>
 8001f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f3c:	f7ff bff0 	b.w	8001f20 <__sfp_lock_release>
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__sinit+0x28>)
 8001f42:	6223      	str	r3, [r4, #32]
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__sinit+0x2c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f5      	bne.n	8001f38 <__sinit+0xc>
 8001f4c:	f7ff ffc4 	bl	8001ed8 <global_stdio_init.part.0>
 8001f50:	e7f2      	b.n	8001f38 <__sinit+0xc>
 8001f52:	bf00      	nop
 8001f54:	08001e99 	.word	0x08001e99
 8001f58:	20000224 	.word	0x20000224

08001f5c <_fwalk_sglue>:
 8001f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f60:	4607      	mov	r7, r0
 8001f62:	4688      	mov	r8, r1
 8001f64:	4614      	mov	r4, r2
 8001f66:	2600      	movs	r6, #0
 8001f68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8001f70:	d505      	bpl.n	8001f7e <_fwalk_sglue+0x22>
 8001f72:	6824      	ldr	r4, [r4, #0]
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	d1f7      	bne.n	8001f68 <_fwalk_sglue+0xc>
 8001f78:	4630      	mov	r0, r6
 8001f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f7e:	89ab      	ldrh	r3, [r5, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d907      	bls.n	8001f94 <_fwalk_sglue+0x38>
 8001f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	d003      	beq.n	8001f94 <_fwalk_sglue+0x38>
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4638      	mov	r0, r7
 8001f90:	47c0      	blx	r8
 8001f92:	4306      	orrs	r6, r0
 8001f94:	3568      	adds	r5, #104	; 0x68
 8001f96:	e7e9      	b.n	8001f6c <_fwalk_sglue+0x10>

08001f98 <_puts_r>:
 8001f98:	6a03      	ldr	r3, [r0, #32]
 8001f9a:	b570      	push	{r4, r5, r6, lr}
 8001f9c:	6884      	ldr	r4, [r0, #8]
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	460e      	mov	r6, r1
 8001fa2:	b90b      	cbnz	r3, 8001fa8 <_puts_r+0x10>
 8001fa4:	f7ff ffc2 	bl	8001f2c <__sinit>
 8001fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001faa:	07db      	lsls	r3, r3, #31
 8001fac:	d405      	bmi.n	8001fba <_puts_r+0x22>
 8001fae:	89a3      	ldrh	r3, [r4, #12]
 8001fb0:	0598      	lsls	r0, r3, #22
 8001fb2:	d402      	bmi.n	8001fba <_puts_r+0x22>
 8001fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fb6:	f000 f99b 	bl	80022f0 <__retarget_lock_acquire_recursive>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	0719      	lsls	r1, r3, #28
 8001fbe:	d513      	bpl.n	8001fe8 <_puts_r+0x50>
 8001fc0:	6923      	ldr	r3, [r4, #16]
 8001fc2:	b18b      	cbz	r3, 8001fe8 <_puts_r+0x50>
 8001fc4:	3e01      	subs	r6, #1
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60a3      	str	r3, [r4, #8]
 8001fd0:	b9e9      	cbnz	r1, 800200e <_puts_r+0x76>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da2e      	bge.n	8002034 <_puts_r+0x9c>
 8001fd6:	4622      	mov	r2, r4
 8001fd8:	210a      	movs	r1, #10
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f000 f87b 	bl	80020d6 <__swbuf_r>
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	d007      	beq.n	8001ff4 <_puts_r+0x5c>
 8001fe4:	250a      	movs	r5, #10
 8001fe6:	e007      	b.n	8001ff8 <_puts_r+0x60>
 8001fe8:	4621      	mov	r1, r4
 8001fea:	4628      	mov	r0, r5
 8001fec:	f000 f8b0 	bl	8002150 <__swsetup_r>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d0e7      	beq.n	8001fc4 <_puts_r+0x2c>
 8001ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8001ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ffa:	07da      	lsls	r2, r3, #31
 8001ffc:	d405      	bmi.n	800200a <_puts_r+0x72>
 8001ffe:	89a3      	ldrh	r3, [r4, #12]
 8002000:	059b      	lsls	r3, r3, #22
 8002002:	d402      	bmi.n	800200a <_puts_r+0x72>
 8002004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002006:	f000 f974 	bl	80022f2 <__retarget_lock_release_recursive>
 800200a:	4628      	mov	r0, r5
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	2b00      	cmp	r3, #0
 8002010:	da04      	bge.n	800201c <_puts_r+0x84>
 8002012:	69a2      	ldr	r2, [r4, #24]
 8002014:	429a      	cmp	r2, r3
 8002016:	dc06      	bgt.n	8002026 <_puts_r+0x8e>
 8002018:	290a      	cmp	r1, #10
 800201a:	d004      	beq.n	8002026 <_puts_r+0x8e>
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	6022      	str	r2, [r4, #0]
 8002022:	7019      	strb	r1, [r3, #0]
 8002024:	e7cf      	b.n	8001fc6 <_puts_r+0x2e>
 8002026:	4622      	mov	r2, r4
 8002028:	4628      	mov	r0, r5
 800202a:	f000 f854 	bl	80020d6 <__swbuf_r>
 800202e:	3001      	adds	r0, #1
 8002030:	d1c9      	bne.n	8001fc6 <_puts_r+0x2e>
 8002032:	e7df      	b.n	8001ff4 <_puts_r+0x5c>
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	250a      	movs	r5, #10
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	6022      	str	r2, [r4, #0]
 800203c:	701d      	strb	r5, [r3, #0]
 800203e:	e7db      	b.n	8001ff8 <_puts_r+0x60>

08002040 <puts>:
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <puts+0xc>)
 8002042:	4601      	mov	r1, r0
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f7ff bfa7 	b.w	8001f98 <_puts_r>
 800204a:	bf00      	nop
 800204c:	20000064 	.word	0x20000064

08002050 <__sread>:
 8002050:	b510      	push	{r4, lr}
 8002052:	460c      	mov	r4, r1
 8002054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002058:	f000 f8fc 	bl	8002254 <_read_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	bfab      	itete	ge
 8002060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002062:	89a3      	ldrhlt	r3, [r4, #12]
 8002064:	181b      	addge	r3, r3, r0
 8002066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800206a:	bfac      	ite	ge
 800206c:	6563      	strge	r3, [r4, #84]	; 0x54
 800206e:	81a3      	strhlt	r3, [r4, #12]
 8002070:	bd10      	pop	{r4, pc}

08002072 <__swrite>:
 8002072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002076:	461f      	mov	r7, r3
 8002078:	898b      	ldrh	r3, [r1, #12]
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	4605      	mov	r5, r0
 800207e:	460c      	mov	r4, r1
 8002080:	4616      	mov	r6, r2
 8002082:	d505      	bpl.n	8002090 <__swrite+0x1e>
 8002084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002088:	2302      	movs	r3, #2
 800208a:	2200      	movs	r2, #0
 800208c:	f000 f8d0 	bl	8002230 <_lseek_r>
 8002090:	89a3      	ldrh	r3, [r4, #12]
 8002092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800209a:	81a3      	strh	r3, [r4, #12]
 800209c:	4632      	mov	r2, r6
 800209e:	463b      	mov	r3, r7
 80020a0:	4628      	mov	r0, r5
 80020a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	f000 b8e7 	b.w	8002278 <_write_r>

080020aa <__sseek>:
 80020aa:	b510      	push	{r4, lr}
 80020ac:	460c      	mov	r4, r1
 80020ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b2:	f000 f8bd 	bl	8002230 <_lseek_r>
 80020b6:	1c43      	adds	r3, r0, #1
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	bf15      	itete	ne
 80020bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80020be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020c6:	81a3      	strheq	r3, [r4, #12]
 80020c8:	bf18      	it	ne
 80020ca:	81a3      	strhne	r3, [r4, #12]
 80020cc:	bd10      	pop	{r4, pc}

080020ce <__sclose>:
 80020ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d2:	f000 b89d 	b.w	8002210 <_close_r>

080020d6 <__swbuf_r>:
 80020d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d8:	460e      	mov	r6, r1
 80020da:	4614      	mov	r4, r2
 80020dc:	4605      	mov	r5, r0
 80020de:	b118      	cbz	r0, 80020e8 <__swbuf_r+0x12>
 80020e0:	6a03      	ldr	r3, [r0, #32]
 80020e2:	b90b      	cbnz	r3, 80020e8 <__swbuf_r+0x12>
 80020e4:	f7ff ff22 	bl	8001f2c <__sinit>
 80020e8:	69a3      	ldr	r3, [r4, #24]
 80020ea:	60a3      	str	r3, [r4, #8]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	071a      	lsls	r2, r3, #28
 80020f0:	d525      	bpl.n	800213e <__swbuf_r+0x68>
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	b31b      	cbz	r3, 800213e <__swbuf_r+0x68>
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	6922      	ldr	r2, [r4, #16]
 80020fa:	1a98      	subs	r0, r3, r2
 80020fc:	6963      	ldr	r3, [r4, #20]
 80020fe:	b2f6      	uxtb	r6, r6
 8002100:	4283      	cmp	r3, r0
 8002102:	4637      	mov	r7, r6
 8002104:	dc04      	bgt.n	8002110 <__swbuf_r+0x3a>
 8002106:	4621      	mov	r1, r4
 8002108:	4628      	mov	r0, r5
 800210a:	f000 fa71 	bl	80025f0 <_fflush_r>
 800210e:	b9e0      	cbnz	r0, 800214a <__swbuf_r+0x74>
 8002110:	68a3      	ldr	r3, [r4, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	60a3      	str	r3, [r4, #8]
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	6022      	str	r2, [r4, #0]
 800211c:	701e      	strb	r6, [r3, #0]
 800211e:	6962      	ldr	r2, [r4, #20]
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	429a      	cmp	r2, r3
 8002124:	d004      	beq.n	8002130 <__swbuf_r+0x5a>
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	07db      	lsls	r3, r3, #31
 800212a:	d506      	bpl.n	800213a <__swbuf_r+0x64>
 800212c:	2e0a      	cmp	r6, #10
 800212e:	d104      	bne.n	800213a <__swbuf_r+0x64>
 8002130:	4621      	mov	r1, r4
 8002132:	4628      	mov	r0, r5
 8002134:	f000 fa5c 	bl	80025f0 <_fflush_r>
 8002138:	b938      	cbnz	r0, 800214a <__swbuf_r+0x74>
 800213a:	4638      	mov	r0, r7
 800213c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800213e:	4621      	mov	r1, r4
 8002140:	4628      	mov	r0, r5
 8002142:	f000 f805 	bl	8002150 <__swsetup_r>
 8002146:	2800      	cmp	r0, #0
 8002148:	d0d5      	beq.n	80020f6 <__swbuf_r+0x20>
 800214a:	f04f 37ff 	mov.w	r7, #4294967295
 800214e:	e7f4      	b.n	800213a <__swbuf_r+0x64>

08002150 <__swsetup_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <__swsetup_r+0xac>)
 8002154:	4605      	mov	r5, r0
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	460c      	mov	r4, r1
 800215a:	b118      	cbz	r0, 8002164 <__swsetup_r+0x14>
 800215c:	6a03      	ldr	r3, [r0, #32]
 800215e:	b90b      	cbnz	r3, 8002164 <__swsetup_r+0x14>
 8002160:	f7ff fee4 	bl	8001f2c <__sinit>
 8002164:	89a3      	ldrh	r3, [r4, #12]
 8002166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800216a:	0718      	lsls	r0, r3, #28
 800216c:	d422      	bmi.n	80021b4 <__swsetup_r+0x64>
 800216e:	06d9      	lsls	r1, r3, #27
 8002170:	d407      	bmi.n	8002182 <__swsetup_r+0x32>
 8002172:	2309      	movs	r3, #9
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800217a:	81a3      	strh	r3, [r4, #12]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	e034      	b.n	80021ec <__swsetup_r+0x9c>
 8002182:	0758      	lsls	r0, r3, #29
 8002184:	d512      	bpl.n	80021ac <__swsetup_r+0x5c>
 8002186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002188:	b141      	cbz	r1, 800219c <__swsetup_r+0x4c>
 800218a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800218e:	4299      	cmp	r1, r3
 8002190:	d002      	beq.n	8002198 <__swsetup_r+0x48>
 8002192:	4628      	mov	r0, r5
 8002194:	f000 f8ae 	bl	80022f4 <_free_r>
 8002198:	2300      	movs	r3, #0
 800219a:	6363      	str	r3, [r4, #52]	; 0x34
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021a2:	81a3      	strh	r3, [r4, #12]
 80021a4:	2300      	movs	r3, #0
 80021a6:	6063      	str	r3, [r4, #4]
 80021a8:	6923      	ldr	r3, [r4, #16]
 80021aa:	6023      	str	r3, [r4, #0]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	81a3      	strh	r3, [r4, #12]
 80021b4:	6923      	ldr	r3, [r4, #16]
 80021b6:	b94b      	cbnz	r3, 80021cc <__swsetup_r+0x7c>
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d003      	beq.n	80021cc <__swsetup_r+0x7c>
 80021c4:	4621      	mov	r1, r4
 80021c6:	4628      	mov	r0, r5
 80021c8:	f000 fa60 	bl	800268c <__smakebuf_r>
 80021cc:	89a0      	ldrh	r0, [r4, #12]
 80021ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021d2:	f010 0301 	ands.w	r3, r0, #1
 80021d6:	d00a      	beq.n	80021ee <__swsetup_r+0x9e>
 80021d8:	2300      	movs	r3, #0
 80021da:	60a3      	str	r3, [r4, #8]
 80021dc:	6963      	ldr	r3, [r4, #20]
 80021de:	425b      	negs	r3, r3
 80021e0:	61a3      	str	r3, [r4, #24]
 80021e2:	6923      	ldr	r3, [r4, #16]
 80021e4:	b943      	cbnz	r3, 80021f8 <__swsetup_r+0xa8>
 80021e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021ea:	d1c4      	bne.n	8002176 <__swsetup_r+0x26>
 80021ec:	bd38      	pop	{r3, r4, r5, pc}
 80021ee:	0781      	lsls	r1, r0, #30
 80021f0:	bf58      	it	pl
 80021f2:	6963      	ldrpl	r3, [r4, #20]
 80021f4:	60a3      	str	r3, [r4, #8]
 80021f6:	e7f4      	b.n	80021e2 <__swsetup_r+0x92>
 80021f8:	2000      	movs	r0, #0
 80021fa:	e7f7      	b.n	80021ec <__swsetup_r+0x9c>
 80021fc:	20000064 	.word	0x20000064

08002200 <memset>:
 8002200:	4402      	add	r2, r0
 8002202:	4603      	mov	r3, r0
 8002204:	4293      	cmp	r3, r2
 8002206:	d100      	bne.n	800220a <memset+0xa>
 8002208:	4770      	bx	lr
 800220a:	f803 1b01 	strb.w	r1, [r3], #1
 800220e:	e7f9      	b.n	8002204 <memset+0x4>

08002210 <_close_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4d06      	ldr	r5, [pc, #24]	; (800222c <_close_r+0x1c>)
 8002214:	2300      	movs	r3, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	602b      	str	r3, [r5, #0]
 800221c:	f7fe fb45 	bl	80008aa <_close>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_close_r+0x1a>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	b103      	cbz	r3, 800222a <_close_r+0x1a>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	20000228 	.word	0x20000228

08002230 <_lseek_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d07      	ldr	r5, [pc, #28]	; (8002250 <_lseek_r+0x20>)
 8002234:	4604      	mov	r4, r0
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	2200      	movs	r2, #0
 800223c:	602a      	str	r2, [r5, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f7fe fb5a 	bl	80008f8 <_lseek>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_lseek_r+0x1e>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_lseek_r+0x1e>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000228 	.word	0x20000228

08002254 <_read_r>:
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4d07      	ldr	r5, [pc, #28]	; (8002274 <_read_r+0x20>)
 8002258:	4604      	mov	r4, r0
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	2200      	movs	r2, #0
 8002260:	602a      	str	r2, [r5, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	f7fe fae8 	bl	8000838 <_read>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d102      	bne.n	8002272 <_read_r+0x1e>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	b103      	cbz	r3, 8002272 <_read_r+0x1e>
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	20000228 	.word	0x20000228

08002278 <_write_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	4d07      	ldr	r5, [pc, #28]	; (8002298 <_write_r+0x20>)
 800227c:	4604      	mov	r4, r0
 800227e:	4608      	mov	r0, r1
 8002280:	4611      	mov	r1, r2
 8002282:	2200      	movs	r2, #0
 8002284:	602a      	str	r2, [r5, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	f7fe faf3 	bl	8000872 <_write>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	d102      	bne.n	8002296 <_write_r+0x1e>
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	b103      	cbz	r3, 8002296 <_write_r+0x1e>
 8002294:	6023      	str	r3, [r4, #0]
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	20000228 	.word	0x20000228

0800229c <__errno>:
 800229c:	4b01      	ldr	r3, [pc, #4]	; (80022a4 <__errno+0x8>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000064 	.word	0x20000064

080022a8 <__libc_init_array>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4d0d      	ldr	r5, [pc, #52]	; (80022e0 <__libc_init_array+0x38>)
 80022ac:	4c0d      	ldr	r4, [pc, #52]	; (80022e4 <__libc_init_array+0x3c>)
 80022ae:	1b64      	subs	r4, r4, r5
 80022b0:	10a4      	asrs	r4, r4, #2
 80022b2:	2600      	movs	r6, #0
 80022b4:	42a6      	cmp	r6, r4
 80022b6:	d109      	bne.n	80022cc <__libc_init_array+0x24>
 80022b8:	4d0b      	ldr	r5, [pc, #44]	; (80022e8 <__libc_init_array+0x40>)
 80022ba:	4c0c      	ldr	r4, [pc, #48]	; (80022ec <__libc_init_array+0x44>)
 80022bc:	f000 fa54 	bl	8002768 <_init>
 80022c0:	1b64      	subs	r4, r4, r5
 80022c2:	10a4      	asrs	r4, r4, #2
 80022c4:	2600      	movs	r6, #0
 80022c6:	42a6      	cmp	r6, r4
 80022c8:	d105      	bne.n	80022d6 <__libc_init_array+0x2e>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d0:	4798      	blx	r3
 80022d2:	3601      	adds	r6, #1
 80022d4:	e7ee      	b.n	80022b4 <__libc_init_array+0xc>
 80022d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022da:	4798      	blx	r3
 80022dc:	3601      	adds	r6, #1
 80022de:	e7f2      	b.n	80022c6 <__libc_init_array+0x1e>
 80022e0:	080027b0 	.word	0x080027b0
 80022e4:	080027b0 	.word	0x080027b0
 80022e8:	080027b0 	.word	0x080027b0
 80022ec:	080027b4 	.word	0x080027b4

080022f0 <__retarget_lock_acquire_recursive>:
 80022f0:	4770      	bx	lr

080022f2 <__retarget_lock_release_recursive>:
 80022f2:	4770      	bx	lr

080022f4 <_free_r>:
 80022f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022f6:	2900      	cmp	r1, #0
 80022f8:	d044      	beq.n	8002384 <_free_r+0x90>
 80022fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022fe:	9001      	str	r0, [sp, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f1a1 0404 	sub.w	r4, r1, #4
 8002306:	bfb8      	it	lt
 8002308:	18e4      	addlt	r4, r4, r3
 800230a:	f000 f8df 	bl	80024cc <__malloc_lock>
 800230e:	4a1e      	ldr	r2, [pc, #120]	; (8002388 <_free_r+0x94>)
 8002310:	9801      	ldr	r0, [sp, #4]
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	b933      	cbnz	r3, 8002324 <_free_r+0x30>
 8002316:	6063      	str	r3, [r4, #4]
 8002318:	6014      	str	r4, [r2, #0]
 800231a:	b003      	add	sp, #12
 800231c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002320:	f000 b8da 	b.w	80024d8 <__malloc_unlock>
 8002324:	42a3      	cmp	r3, r4
 8002326:	d908      	bls.n	800233a <_free_r+0x46>
 8002328:	6825      	ldr	r5, [r4, #0]
 800232a:	1961      	adds	r1, r4, r5
 800232c:	428b      	cmp	r3, r1
 800232e:	bf01      	itttt	eq
 8002330:	6819      	ldreq	r1, [r3, #0]
 8002332:	685b      	ldreq	r3, [r3, #4]
 8002334:	1949      	addeq	r1, r1, r5
 8002336:	6021      	streq	r1, [r4, #0]
 8002338:	e7ed      	b.n	8002316 <_free_r+0x22>
 800233a:	461a      	mov	r2, r3
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	b10b      	cbz	r3, 8002344 <_free_r+0x50>
 8002340:	42a3      	cmp	r3, r4
 8002342:	d9fa      	bls.n	800233a <_free_r+0x46>
 8002344:	6811      	ldr	r1, [r2, #0]
 8002346:	1855      	adds	r5, r2, r1
 8002348:	42a5      	cmp	r5, r4
 800234a:	d10b      	bne.n	8002364 <_free_r+0x70>
 800234c:	6824      	ldr	r4, [r4, #0]
 800234e:	4421      	add	r1, r4
 8002350:	1854      	adds	r4, r2, r1
 8002352:	42a3      	cmp	r3, r4
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	d1e0      	bne.n	800231a <_free_r+0x26>
 8002358:	681c      	ldr	r4, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	6053      	str	r3, [r2, #4]
 800235e:	440c      	add	r4, r1
 8002360:	6014      	str	r4, [r2, #0]
 8002362:	e7da      	b.n	800231a <_free_r+0x26>
 8002364:	d902      	bls.n	800236c <_free_r+0x78>
 8002366:	230c      	movs	r3, #12
 8002368:	6003      	str	r3, [r0, #0]
 800236a:	e7d6      	b.n	800231a <_free_r+0x26>
 800236c:	6825      	ldr	r5, [r4, #0]
 800236e:	1961      	adds	r1, r4, r5
 8002370:	428b      	cmp	r3, r1
 8002372:	bf04      	itt	eq
 8002374:	6819      	ldreq	r1, [r3, #0]
 8002376:	685b      	ldreq	r3, [r3, #4]
 8002378:	6063      	str	r3, [r4, #4]
 800237a:	bf04      	itt	eq
 800237c:	1949      	addeq	r1, r1, r5
 800237e:	6021      	streq	r1, [r4, #0]
 8002380:	6054      	str	r4, [r2, #4]
 8002382:	e7ca      	b.n	800231a <_free_r+0x26>
 8002384:	b003      	add	sp, #12
 8002386:	bd30      	pop	{r4, r5, pc}
 8002388:	20000230 	.word	0x20000230

0800238c <sbrk_aligned>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	4e0e      	ldr	r6, [pc, #56]	; (80023c8 <sbrk_aligned+0x3c>)
 8002390:	460c      	mov	r4, r1
 8002392:	6831      	ldr	r1, [r6, #0]
 8002394:	4605      	mov	r5, r0
 8002396:	b911      	cbnz	r1, 800239e <sbrk_aligned+0x12>
 8002398:	f000 f9d6 	bl	8002748 <_sbrk_r>
 800239c:	6030      	str	r0, [r6, #0]
 800239e:	4621      	mov	r1, r4
 80023a0:	4628      	mov	r0, r5
 80023a2:	f000 f9d1 	bl	8002748 <_sbrk_r>
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	d00a      	beq.n	80023c0 <sbrk_aligned+0x34>
 80023aa:	1cc4      	adds	r4, r0, #3
 80023ac:	f024 0403 	bic.w	r4, r4, #3
 80023b0:	42a0      	cmp	r0, r4
 80023b2:	d007      	beq.n	80023c4 <sbrk_aligned+0x38>
 80023b4:	1a21      	subs	r1, r4, r0
 80023b6:	4628      	mov	r0, r5
 80023b8:	f000 f9c6 	bl	8002748 <_sbrk_r>
 80023bc:	3001      	adds	r0, #1
 80023be:	d101      	bne.n	80023c4 <sbrk_aligned+0x38>
 80023c0:	f04f 34ff 	mov.w	r4, #4294967295
 80023c4:	4620      	mov	r0, r4
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	20000234 	.word	0x20000234

080023cc <_malloc_r>:
 80023cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d0:	1ccd      	adds	r5, r1, #3
 80023d2:	f025 0503 	bic.w	r5, r5, #3
 80023d6:	3508      	adds	r5, #8
 80023d8:	2d0c      	cmp	r5, #12
 80023da:	bf38      	it	cc
 80023dc:	250c      	movcc	r5, #12
 80023de:	2d00      	cmp	r5, #0
 80023e0:	4607      	mov	r7, r0
 80023e2:	db01      	blt.n	80023e8 <_malloc_r+0x1c>
 80023e4:	42a9      	cmp	r1, r5
 80023e6:	d905      	bls.n	80023f4 <_malloc_r+0x28>
 80023e8:	230c      	movs	r3, #12
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	2600      	movs	r6, #0
 80023ee:	4630      	mov	r0, r6
 80023f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80024c8 <_malloc_r+0xfc>
 80023f8:	f000 f868 	bl	80024cc <__malloc_lock>
 80023fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002400:	461c      	mov	r4, r3
 8002402:	bb5c      	cbnz	r4, 800245c <_malloc_r+0x90>
 8002404:	4629      	mov	r1, r5
 8002406:	4638      	mov	r0, r7
 8002408:	f7ff ffc0 	bl	800238c <sbrk_aligned>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	4604      	mov	r4, r0
 8002410:	d155      	bne.n	80024be <_malloc_r+0xf2>
 8002412:	f8d8 4000 	ldr.w	r4, [r8]
 8002416:	4626      	mov	r6, r4
 8002418:	2e00      	cmp	r6, #0
 800241a:	d145      	bne.n	80024a8 <_malloc_r+0xdc>
 800241c:	2c00      	cmp	r4, #0
 800241e:	d048      	beq.n	80024b2 <_malloc_r+0xe6>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	4631      	mov	r1, r6
 8002424:	4638      	mov	r0, r7
 8002426:	eb04 0903 	add.w	r9, r4, r3
 800242a:	f000 f98d 	bl	8002748 <_sbrk_r>
 800242e:	4581      	cmp	r9, r0
 8002430:	d13f      	bne.n	80024b2 <_malloc_r+0xe6>
 8002432:	6821      	ldr	r1, [r4, #0]
 8002434:	1a6d      	subs	r5, r5, r1
 8002436:	4629      	mov	r1, r5
 8002438:	4638      	mov	r0, r7
 800243a:	f7ff ffa7 	bl	800238c <sbrk_aligned>
 800243e:	3001      	adds	r0, #1
 8002440:	d037      	beq.n	80024b2 <_malloc_r+0xe6>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	442b      	add	r3, r5
 8002446:	6023      	str	r3, [r4, #0]
 8002448:	f8d8 3000 	ldr.w	r3, [r8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d038      	beq.n	80024c2 <_malloc_r+0xf6>
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	42a2      	cmp	r2, r4
 8002454:	d12b      	bne.n	80024ae <_malloc_r+0xe2>
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e00f      	b.n	800247c <_malloc_r+0xb0>
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	1b52      	subs	r2, r2, r5
 8002460:	d41f      	bmi.n	80024a2 <_malloc_r+0xd6>
 8002462:	2a0b      	cmp	r2, #11
 8002464:	d917      	bls.n	8002496 <_malloc_r+0xca>
 8002466:	1961      	adds	r1, r4, r5
 8002468:	42a3      	cmp	r3, r4
 800246a:	6025      	str	r5, [r4, #0]
 800246c:	bf18      	it	ne
 800246e:	6059      	strne	r1, [r3, #4]
 8002470:	6863      	ldr	r3, [r4, #4]
 8002472:	bf08      	it	eq
 8002474:	f8c8 1000 	streq.w	r1, [r8]
 8002478:	5162      	str	r2, [r4, r5]
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	4638      	mov	r0, r7
 800247e:	f104 060b 	add.w	r6, r4, #11
 8002482:	f000 f829 	bl	80024d8 <__malloc_unlock>
 8002486:	f026 0607 	bic.w	r6, r6, #7
 800248a:	1d23      	adds	r3, r4, #4
 800248c:	1af2      	subs	r2, r6, r3
 800248e:	d0ae      	beq.n	80023ee <_malloc_r+0x22>
 8002490:	1b9b      	subs	r3, r3, r6
 8002492:	50a3      	str	r3, [r4, r2]
 8002494:	e7ab      	b.n	80023ee <_malloc_r+0x22>
 8002496:	42a3      	cmp	r3, r4
 8002498:	6862      	ldr	r2, [r4, #4]
 800249a:	d1dd      	bne.n	8002458 <_malloc_r+0x8c>
 800249c:	f8c8 2000 	str.w	r2, [r8]
 80024a0:	e7ec      	b.n	800247c <_malloc_r+0xb0>
 80024a2:	4623      	mov	r3, r4
 80024a4:	6864      	ldr	r4, [r4, #4]
 80024a6:	e7ac      	b.n	8002402 <_malloc_r+0x36>
 80024a8:	4634      	mov	r4, r6
 80024aa:	6876      	ldr	r6, [r6, #4]
 80024ac:	e7b4      	b.n	8002418 <_malloc_r+0x4c>
 80024ae:	4613      	mov	r3, r2
 80024b0:	e7cc      	b.n	800244c <_malloc_r+0x80>
 80024b2:	230c      	movs	r3, #12
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4638      	mov	r0, r7
 80024b8:	f000 f80e 	bl	80024d8 <__malloc_unlock>
 80024bc:	e797      	b.n	80023ee <_malloc_r+0x22>
 80024be:	6025      	str	r5, [r4, #0]
 80024c0:	e7dc      	b.n	800247c <_malloc_r+0xb0>
 80024c2:	605b      	str	r3, [r3, #4]
 80024c4:	deff      	udf	#255	; 0xff
 80024c6:	bf00      	nop
 80024c8:	20000230 	.word	0x20000230

080024cc <__malloc_lock>:
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <__malloc_lock+0x8>)
 80024ce:	f7ff bf0f 	b.w	80022f0 <__retarget_lock_acquire_recursive>
 80024d2:	bf00      	nop
 80024d4:	2000022c 	.word	0x2000022c

080024d8 <__malloc_unlock>:
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <__malloc_unlock+0x8>)
 80024da:	f7ff bf0a 	b.w	80022f2 <__retarget_lock_release_recursive>
 80024de:	bf00      	nop
 80024e0:	2000022c 	.word	0x2000022c

080024e4 <__sflush_r>:
 80024e4:	898a      	ldrh	r2, [r1, #12]
 80024e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ea:	4605      	mov	r5, r0
 80024ec:	0710      	lsls	r0, r2, #28
 80024ee:	460c      	mov	r4, r1
 80024f0:	d458      	bmi.n	80025a4 <__sflush_r+0xc0>
 80024f2:	684b      	ldr	r3, [r1, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dc05      	bgt.n	8002504 <__sflush_r+0x20>
 80024f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	dc02      	bgt.n	8002504 <__sflush_r+0x20>
 80024fe:	2000      	movs	r0, #0
 8002500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002506:	2e00      	cmp	r6, #0
 8002508:	d0f9      	beq.n	80024fe <__sflush_r+0x1a>
 800250a:	2300      	movs	r3, #0
 800250c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002510:	682f      	ldr	r7, [r5, #0]
 8002512:	6a21      	ldr	r1, [r4, #32]
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	d032      	beq.n	800257e <__sflush_r+0x9a>
 8002518:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	075a      	lsls	r2, r3, #29
 800251e:	d505      	bpl.n	800252c <__sflush_r+0x48>
 8002520:	6863      	ldr	r3, [r4, #4]
 8002522:	1ac0      	subs	r0, r0, r3
 8002524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002526:	b10b      	cbz	r3, 800252c <__sflush_r+0x48>
 8002528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252a:	1ac0      	subs	r0, r0, r3
 800252c:	2300      	movs	r3, #0
 800252e:	4602      	mov	r2, r0
 8002530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002532:	6a21      	ldr	r1, [r4, #32]
 8002534:	4628      	mov	r0, r5
 8002536:	47b0      	blx	r6
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	d106      	bne.n	800254c <__sflush_r+0x68>
 800253e:	6829      	ldr	r1, [r5, #0]
 8002540:	291d      	cmp	r1, #29
 8002542:	d82b      	bhi.n	800259c <__sflush_r+0xb8>
 8002544:	4a29      	ldr	r2, [pc, #164]	; (80025ec <__sflush_r+0x108>)
 8002546:	410a      	asrs	r2, r1
 8002548:	07d6      	lsls	r6, r2, #31
 800254a:	d427      	bmi.n	800259c <__sflush_r+0xb8>
 800254c:	2200      	movs	r2, #0
 800254e:	6062      	str	r2, [r4, #4]
 8002550:	04d9      	lsls	r1, r3, #19
 8002552:	6922      	ldr	r2, [r4, #16]
 8002554:	6022      	str	r2, [r4, #0]
 8002556:	d504      	bpl.n	8002562 <__sflush_r+0x7e>
 8002558:	1c42      	adds	r2, r0, #1
 800255a:	d101      	bne.n	8002560 <__sflush_r+0x7c>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	b903      	cbnz	r3, 8002562 <__sflush_r+0x7e>
 8002560:	6560      	str	r0, [r4, #84]	; 0x54
 8002562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002564:	602f      	str	r7, [r5, #0]
 8002566:	2900      	cmp	r1, #0
 8002568:	d0c9      	beq.n	80024fe <__sflush_r+0x1a>
 800256a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800256e:	4299      	cmp	r1, r3
 8002570:	d002      	beq.n	8002578 <__sflush_r+0x94>
 8002572:	4628      	mov	r0, r5
 8002574:	f7ff febe 	bl	80022f4 <_free_r>
 8002578:	2000      	movs	r0, #0
 800257a:	6360      	str	r0, [r4, #52]	; 0x34
 800257c:	e7c0      	b.n	8002500 <__sflush_r+0x1c>
 800257e:	2301      	movs	r3, #1
 8002580:	4628      	mov	r0, r5
 8002582:	47b0      	blx	r6
 8002584:	1c41      	adds	r1, r0, #1
 8002586:	d1c8      	bne.n	800251a <__sflush_r+0x36>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0c5      	beq.n	800251a <__sflush_r+0x36>
 800258e:	2b1d      	cmp	r3, #29
 8002590:	d001      	beq.n	8002596 <__sflush_r+0xb2>
 8002592:	2b16      	cmp	r3, #22
 8002594:	d101      	bne.n	800259a <__sflush_r+0xb6>
 8002596:	602f      	str	r7, [r5, #0]
 8002598:	e7b1      	b.n	80024fe <__sflush_r+0x1a>
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a0:	81a3      	strh	r3, [r4, #12]
 80025a2:	e7ad      	b.n	8002500 <__sflush_r+0x1c>
 80025a4:	690f      	ldr	r7, [r1, #16]
 80025a6:	2f00      	cmp	r7, #0
 80025a8:	d0a9      	beq.n	80024fe <__sflush_r+0x1a>
 80025aa:	0793      	lsls	r3, r2, #30
 80025ac:	680e      	ldr	r6, [r1, #0]
 80025ae:	bf08      	it	eq
 80025b0:	694b      	ldreq	r3, [r1, #20]
 80025b2:	600f      	str	r7, [r1, #0]
 80025b4:	bf18      	it	ne
 80025b6:	2300      	movne	r3, #0
 80025b8:	eba6 0807 	sub.w	r8, r6, r7
 80025bc:	608b      	str	r3, [r1, #8]
 80025be:	f1b8 0f00 	cmp.w	r8, #0
 80025c2:	dd9c      	ble.n	80024fe <__sflush_r+0x1a>
 80025c4:	6a21      	ldr	r1, [r4, #32]
 80025c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025c8:	4643      	mov	r3, r8
 80025ca:	463a      	mov	r2, r7
 80025cc:	4628      	mov	r0, r5
 80025ce:	47b0      	blx	r6
 80025d0:	2800      	cmp	r0, #0
 80025d2:	dc06      	bgt.n	80025e2 <__sflush_r+0xfe>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025da:	81a3      	strh	r3, [r4, #12]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	e78e      	b.n	8002500 <__sflush_r+0x1c>
 80025e2:	4407      	add	r7, r0
 80025e4:	eba8 0800 	sub.w	r8, r8, r0
 80025e8:	e7e9      	b.n	80025be <__sflush_r+0xda>
 80025ea:	bf00      	nop
 80025ec:	dfbffffe 	.word	0xdfbffffe

080025f0 <_fflush_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	690b      	ldr	r3, [r1, #16]
 80025f4:	4605      	mov	r5, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	b913      	cbnz	r3, 8002600 <_fflush_r+0x10>
 80025fa:	2500      	movs	r5, #0
 80025fc:	4628      	mov	r0, r5
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	b118      	cbz	r0, 800260a <_fflush_r+0x1a>
 8002602:	6a03      	ldr	r3, [r0, #32]
 8002604:	b90b      	cbnz	r3, 800260a <_fflush_r+0x1a>
 8002606:	f7ff fc91 	bl	8001f2c <__sinit>
 800260a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f3      	beq.n	80025fa <_fflush_r+0xa>
 8002612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002614:	07d0      	lsls	r0, r2, #31
 8002616:	d404      	bmi.n	8002622 <_fflush_r+0x32>
 8002618:	0599      	lsls	r1, r3, #22
 800261a:	d402      	bmi.n	8002622 <_fflush_r+0x32>
 800261c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800261e:	f7ff fe67 	bl	80022f0 <__retarget_lock_acquire_recursive>
 8002622:	4628      	mov	r0, r5
 8002624:	4621      	mov	r1, r4
 8002626:	f7ff ff5d 	bl	80024e4 <__sflush_r>
 800262a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800262c:	07da      	lsls	r2, r3, #31
 800262e:	4605      	mov	r5, r0
 8002630:	d4e4      	bmi.n	80025fc <_fflush_r+0xc>
 8002632:	89a3      	ldrh	r3, [r4, #12]
 8002634:	059b      	lsls	r3, r3, #22
 8002636:	d4e1      	bmi.n	80025fc <_fflush_r+0xc>
 8002638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800263a:	f7ff fe5a 	bl	80022f2 <__retarget_lock_release_recursive>
 800263e:	e7dd      	b.n	80025fc <_fflush_r+0xc>

08002640 <__swhatbuf_r>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460c      	mov	r4, r1
 8002644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002648:	2900      	cmp	r1, #0
 800264a:	b096      	sub	sp, #88	; 0x58
 800264c:	4615      	mov	r5, r2
 800264e:	461e      	mov	r6, r3
 8002650:	da0d      	bge.n	800266e <__swhatbuf_r+0x2e>
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	bf0c      	ite	eq
 800265e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002662:	2340      	movne	r3, #64	; 0x40
 8002664:	2000      	movs	r0, #0
 8002666:	6031      	str	r1, [r6, #0]
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	b016      	add	sp, #88	; 0x58
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	466a      	mov	r2, sp
 8002670:	f000 f848 	bl	8002704 <_fstat_r>
 8002674:	2800      	cmp	r0, #0
 8002676:	dbec      	blt.n	8002652 <__swhatbuf_r+0x12>
 8002678:	9901      	ldr	r1, [sp, #4]
 800267a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800267e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002682:	4259      	negs	r1, r3
 8002684:	4159      	adcs	r1, r3
 8002686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268a:	e7eb      	b.n	8002664 <__swhatbuf_r+0x24>

0800268c <__smakebuf_r>:
 800268c:	898b      	ldrh	r3, [r1, #12]
 800268e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002690:	079d      	lsls	r5, r3, #30
 8002692:	4606      	mov	r6, r0
 8002694:	460c      	mov	r4, r1
 8002696:	d507      	bpl.n	80026a8 <__smakebuf_r+0x1c>
 8002698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	6123      	str	r3, [r4, #16]
 80026a0:	2301      	movs	r3, #1
 80026a2:	6163      	str	r3, [r4, #20]
 80026a4:	b002      	add	sp, #8
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	ab01      	add	r3, sp, #4
 80026aa:	466a      	mov	r2, sp
 80026ac:	f7ff ffc8 	bl	8002640 <__swhatbuf_r>
 80026b0:	9900      	ldr	r1, [sp, #0]
 80026b2:	4605      	mov	r5, r0
 80026b4:	4630      	mov	r0, r6
 80026b6:	f7ff fe89 	bl	80023cc <_malloc_r>
 80026ba:	b948      	cbnz	r0, 80026d0 <__smakebuf_r+0x44>
 80026bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026c0:	059a      	lsls	r2, r3, #22
 80026c2:	d4ef      	bmi.n	80026a4 <__smakebuf_r+0x18>
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	81a3      	strh	r3, [r4, #12]
 80026ce:	e7e3      	b.n	8002698 <__smakebuf_r+0xc>
 80026d0:	89a3      	ldrh	r3, [r4, #12]
 80026d2:	6020      	str	r0, [r4, #0]
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	9b00      	ldr	r3, [sp, #0]
 80026dc:	6163      	str	r3, [r4, #20]
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	6120      	str	r0, [r4, #16]
 80026e2:	b15b      	cbz	r3, 80026fc <__smakebuf_r+0x70>
 80026e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026e8:	4630      	mov	r0, r6
 80026ea:	f000 f81d 	bl	8002728 <_isatty_r>
 80026ee:	b128      	cbz	r0, 80026fc <__smakebuf_r+0x70>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	89a3      	ldrh	r3, [r4, #12]
 80026fe:	431d      	orrs	r5, r3
 8002700:	81a5      	strh	r5, [r4, #12]
 8002702:	e7cf      	b.n	80026a4 <__smakebuf_r+0x18>

08002704 <_fstat_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4d07      	ldr	r5, [pc, #28]	; (8002724 <_fstat_r+0x20>)
 8002708:	2300      	movs	r3, #0
 800270a:	4604      	mov	r4, r0
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	602b      	str	r3, [r5, #0]
 8002712:	f7fe f8d6 	bl	80008c2 <_fstat>
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	d102      	bne.n	8002720 <_fstat_r+0x1c>
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	b103      	cbz	r3, 8002720 <_fstat_r+0x1c>
 800271e:	6023      	str	r3, [r4, #0]
 8002720:	bd38      	pop	{r3, r4, r5, pc}
 8002722:	bf00      	nop
 8002724:	20000228 	.word	0x20000228

08002728 <_isatty_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d06      	ldr	r5, [pc, #24]	; (8002744 <_isatty_r+0x1c>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe f8d5 	bl	80008e2 <_isatty>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_isatty_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_isatty_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000228 	.word	0x20000228

08002748 <_sbrk_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	4d06      	ldr	r5, [pc, #24]	; (8002764 <_sbrk_r+0x1c>)
 800274c:	2300      	movs	r3, #0
 800274e:	4604      	mov	r4, r0
 8002750:	4608      	mov	r0, r1
 8002752:	602b      	str	r3, [r5, #0]
 8002754:	f7fe f8de 	bl	8000914 <_sbrk>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d102      	bne.n	8002762 <_sbrk_r+0x1a>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b103      	cbz	r3, 8002762 <_sbrk_r+0x1a>
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	bd38      	pop	{r3, r4, r5, pc}
 8002764:	20000228 	.word	0x20000228

08002768 <_init>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr

08002774 <_fini>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr
